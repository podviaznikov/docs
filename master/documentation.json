[
  {
    "type": "meta",
    "id": "meta",
    "description": "<p><a href=\"https://github.com/substance/substance\" target=\"_blank\">Substance</a> is a JavaScript library for web-based content editing.</p>\n<p>Here's an overview of the available API's:</p>\n<ul>\n<li><a href=\"#nodeId=model\" data-type=\"cross-link\" data-node-id=\"model\">model</a> - Define and manipulate custom articles based on data</li>\n<li><a href=\"#nodeId=model/data\" data-type=\"cross-link\" data-node-id=\"model/data\">model/data</a> - Core data representation framework</li>\n<li><a href=\"#nodeId=model/transform\" data-type=\"cross-link\" data-node-id=\"model/transform\">model/transform</a> - Higher level document operations that editor implementations can use</li>\n<li><a href=\"#nodeId=ui\" data-type=\"cross-link\" data-node-id=\"ui\">ui</a> - Reusable UI components for building advanced editing interfaces</li>\n<li><a href=\"#nodeId=util\" data-type=\"cross-link\" data-node-id=\"util\">util</a> - Utilities</li>\n</ul>\n",
    "repository": "https://github.com/substance/substance",
    "sha": "cf36c11ac2ca83bf35c536606857796bc760d125"
  },
  {
    "type": "namespace",
    "id": "model",
    "name": "model",
    "description": "<p>All you need for defining custom article formats and manipulate them.</p>\n",
    "members": [
      "model/Container",
      "model/ContainerAnnotation",
      "model/ContainerSelection",
      "model/DOMImporter",
      "model/Document",
      "model/DocumentIndex",
      "model/DocumentNode",
      "model/DocumentSchema",
      "model/HTMLExporter",
      "model/HTMLImporter",
      "model/PropertyAnnotation",
      "model/PropertySelection",
      "model/Selection",
      "model/TextNode",
      "model/TransactionDocument",
      "model/XMLExporter",
      "model/XMLImporter",
      "model/documentHelpers"
    ]
  },
  {
    "type": "function",
    "id": "model/Container",
    "description": "<p>A Container represents a list of node ids in first place.\nAt the same time it keeps a sequence of components which are the editable\nproperties of the nodes within this container.\nWhile most editing occurs on a property level (such as editing text),\nother things happen on a node level, e.g., breaking or mergin nodes,\nor spanning annotations or so called ContainerAnnotations.\nA Container provides a bridge between those two worlds: nodes and properties.</p>\n",
    "example": "<p>A figure node might consist of a title, an image, and a caption.\nAs the image is not editable via conventional editing, we can say, the figure consists of\ntwo editable properties <code>title</code> and <code>caption</code>.</p>\n<p>In our data model we can describe selections by a start coordinate and an end\ncoordinate, such as</p>\n<pre><code class=\"hljs lang-js\">{\n  start: { path: [<span class=\"hljs-string\">'paragraph_1'</span>, <span class=\"hljs-string\">'content'</span>],   offset: <span class=\"hljs-number\">10</span> } },\n  end:   { path: [<span class=\"hljs-string\">'figure_10'</span>,   <span class=\"hljs-string\">'caption'</span>],   offset: <span class=\"hljs-number\">5</span>  } }\n}\n</code></pre>\n<p>I.e. such a selection starts in a component of a paragraph, and ends in the caption of a figure.\nIf you want to use that selection for deleting, you need to derive somehow what exactly\nlies between those coordinates. For example, there could be some paragraphs, which would\nget deleted completely and the paragraph and the figure where the selection started and ended\nwould only be updated.</p>\n",
    "sourceFile": "model/Container.js",
    "sourceLine": 41,
    "tags": [
      {
        "type": "prop",
        "value": "{String[]} nodes"
      }
    ],
    "parent": "model",
    "name": "Container",
    "params": []
  },
  {
    "type": "class",
    "id": "model/ContainerAnnotation",
    "description": "<p>Describes an annotation sticking on a container that can span over multiple\nnodes.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">{\n  <span class=\"hljs-string\">\"id\"</span>: <span class=\"hljs-string\">\"subject_reference_1\"</span>,\n  <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"subject_reference\"</span>,\n  <span class=\"hljs-string\">\"container\"</span>: <span class=\"hljs-string\">\"content\"</span>,\n  <span class=\"hljs-string\">\"startPath\"</span>: [<span class=\"hljs-string\">\"text_2\"</span>, <span class=\"hljs-string\">\"content\"</span>],\n  <span class=\"hljs-string\">\"startOffset\"</span>: <span class=\"hljs-number\">100</span>,\n  <span class=\"hljs-string\">\"endPath\"</span>: [<span class=\"hljs-string\">\"text_4\"</span>, <span class=\"hljs-string\">\"content\"</span>],\n  <span class=\"hljs-string\">\"endOffset\"</span>: <span class=\"hljs-number\">40</span>\n}\n</code></pre>\n",
    "sourceFile": "model/ContainerAnnotation.js",
    "sourceLine": 33,
    "tags": [],
    "parent": "model",
    "name": "ContainerAnnotation",
    "members": [
      "model/ContainerAnnotation#getSelection",
      "model/ContainerAnnotation#getText",
      "model/ContainerAnnotation.Anchor",
      "model/ContainerAnnotation.Fragment"
    ]
  },
  {
    "type": "method",
    "id": "model/ContainerAnnotation#getSelection",
    "description": "<p>Provides a selection which has the same range as this annotation.</p>\n",
    "sourceFile": "model/ContainerAnnotation.js",
    "sourceLine": 58,
    "isPrivate": false,
    "tags": [],
    "parent": "model/ContainerAnnotation",
    "name": "getSelection",
    "params": [],
    "returns": {
      "type": "model/ContainerSelection",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/ContainerAnnotation#getText",
    "description": "<p>Get the plain text spanned by this annotation.</p>\n",
    "sourceFile": "model/ContainerAnnotation.js",
    "sourceLine": 44,
    "isPrivate": false,
    "tags": [],
    "parent": "model/ContainerAnnotation",
    "name": "getText",
    "params": [],
    "returns": {
      "type": "String",
      "description": ""
    }
  },
  {
    "type": "class",
    "id": "model/ContainerAnnotation.Anchor",
    "sourceFile": "model/ContainerAnnotation.js",
    "sourceLine": 156,
    "isPrivate": true,
    "tags": [],
    "parent": "model/ContainerAnnotation",
    "name": "Anchor",
    "members": [],
    "isStatic": true
  },
  {
    "type": "class",
    "id": "model/ContainerAnnotation.Fragment",
    "sourceFile": "model/ContainerAnnotation.js",
    "sourceLine": 205,
    "isPrivate": true,
    "tags": [],
    "parent": "model/ContainerAnnotation",
    "name": "Fragment",
    "members": [],
    "isStatic": true
  },
  {
    "type": "class",
    "id": "model/ContainerSelection",
    "description": "<p>A selection spanning multiple nodes.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> containerSel = doc.createSelection({\n  type: <span class=\"hljs-string\">'container'</span>,\n  containerId: <span class=\"hljs-string\">'body'</span>,\n  startPath: [<span class=\"hljs-string\">'p1'</span>, <span class=\"hljs-string\">'content'</span>],\n  startOffset: <span class=\"hljs-number\">5</span>,\n  endPath: [<span class=\"hljs-string\">'p3'</span>, <span class=\"hljs-string\">'content'</span>],\n  endOffset: <span class=\"hljs-number\">4</span>,\n});\n</code></pre>\n",
    "sourceFile": "model/ContainerSelection.js",
    "sourceLine": 29,
    "tags": [],
    "parent": "model",
    "name": "ContainerSelection",
    "members": [
      "model/ContainerSelection#collapse",
      "model/ContainerSelection#containerId",
      "model/ContainerSelection#endOffset",
      "model/ContainerSelection#endPath",
      "model/ContainerSelection#getContainer",
      "model/ContainerSelection#getFragments",
      "model/ContainerSelection#includesWithOneBoundary",
      "model/ContainerSelection#splitIntoPropertySelections",
      "model/ContainerSelection#startOffset",
      "model/ContainerSelection#startPath"
    ],
    "superClass": "model/PropertySelection"
  },
  {
    "type": "method",
    "id": "model/ContainerSelection#collapse",
    "description": "<p>Collapse a selection to chosen direction.</p>\n",
    "sourceFile": "model/ContainerSelection.js",
    "sourceLine": 133,
    "isPrivate": false,
    "tags": [],
    "parent": "model/ContainerSelection",
    "name": "collapse",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "direction",
        "description": "<p>either left of right</p>\n"
      }
    ],
    "returns": {
      "type": "PropertySelection",
      "description": ""
    }
  },
  {
    "type": "property",
    "id": "model/ContainerSelection#containerId",
    "sourceFile": "model/ContainerSelection.js",
    "sourceLine": 35,
    "tags": [],
    "parent": "model/ContainerSelection",
    "name": "containerId",
    "dataType": "{String}"
  },
  {
    "type": "property",
    "id": "model/ContainerSelection#endOffset",
    "description": "<p>The character position where this annotations ends.</p>\n",
    "sourceFile": "model/ContainerSelection.js",
    "sourceLine": 59,
    "tags": [],
    "parent": "model/ContainerSelection",
    "name": "endOffset",
    "dataType": "{Number}"
  },
  {
    "type": "property",
    "id": "model/ContainerSelection#endPath",
    "description": "<p>The path of the property where this annotations ends.</p>\n",
    "sourceFile": "model/ContainerSelection.js",
    "sourceLine": 53,
    "tags": [],
    "parent": "model/ContainerSelection",
    "name": "endPath",
    "dataType": "{String[]}"
  },
  {
    "type": "method",
    "id": "model/ContainerSelection#getContainer",
    "sourceFile": "model/ContainerSelection.js",
    "sourceLine": 123,
    "isPrivate": false,
    "tags": [],
    "parent": "model/ContainerSelection",
    "name": "getContainer",
    "params": [],
    "returns": {
      "type": "model/Container",
      "description": "<p>The container node instance for this selection.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/ContainerSelection#getFragments",
    "sourceFile": "model/ContainerSelection.js",
    "sourceLine": 277,
    "isPrivate": false,
    "tags": [],
    "parent": "model/ContainerSelection",
    "name": "getFragments",
    "params": [],
    "returns": {
      "type": "Selection.Fragment[]",
      "description": "<p>Fragments resulting from splitting this into property selections.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/ContainerSelection#includesWithOneBoundary",
    "description": "<p>Checks if this selection contains another but has at least one boundary in common.</p>\n",
    "sourceFile": "model/ContainerSelection.js",
    "sourceLine": 217,
    "isPrivate": true,
    "tags": [],
    "parent": "model/ContainerSelection",
    "name": "includesWithOneBoundary",
    "params": [
      {
        "type": "model/Selection",
        "shortType": "Selection",
        "name": "other",
        "description": ""
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/ContainerSelection#splitIntoPropertySelections",
    "description": "<p>Splits container selection into property selections</p>\n",
    "sourceFile": "model/ContainerSelection.js",
    "sourceLine": 251,
    "isPrivate": false,
    "tags": [],
    "parent": "model/ContainerSelection",
    "name": "splitIntoPropertySelections",
    "params": [],
    "returns": {
      "type": "PropertySelection[]",
      "description": ""
    }
  },
  {
    "type": "property",
    "id": "model/ContainerSelection#startOffset",
    "description": "<p>The character position where this annotations starts.</p>\n",
    "sourceFile": "model/ContainerSelection.js",
    "sourceLine": 47,
    "tags": [],
    "parent": "model/ContainerSelection",
    "name": "startOffset",
    "dataType": "{Number}"
  },
  {
    "type": "property",
    "id": "model/ContainerSelection#startPath",
    "description": "<p>The path of the property where this annotations starts.</p>\n",
    "sourceFile": "model/ContainerSelection.js",
    "sourceLine": 41,
    "tags": [],
    "parent": "model/ContainerSelection",
    "name": "startPath",
    "dataType": "{String[]}"
  },
  {
    "type": "class",
    "id": "model/DOMImporter",
    "description": "<p>A generic base implementation for XML/HTML importers.</p>\n",
    "sourceFile": "model/DOMImporter.js",
    "sourceLine": 16,
    "tags": [
      {
        "type": "param",
        "value": {
          "type": "Object",
          "shortType": "Object",
          "name": "config",
          "description": ""
        }
      }
    ],
    "parent": "model",
    "name": "DOMImporter",
    "members": [
      "model/DOMImporter#_createDefaultBlockElement",
      "model/DOMImporter#_trimTextContent",
      "model/DOMImporter#_wrapInlineElementsIntoBlockElement",
      "model/DOMImporter#annotatedText",
      "model/DOMImporter#convertContainer",
      "model/DOMImporter#convertElement",
      "model/DOMImporter#customText",
      "model/DOMImporter#nextId",
      "model/DOMImporter#plainText"
    ]
  },
  {
    "type": "method",
    "id": "model/DOMImporter#_createDefaultBlockElement",
    "description": "<p>Converts an element into a default block level node.</p>\n",
    "sourceFile": "model/DOMImporter.js",
    "sourceLine": 496,
    "isPrivate": true,
    "tags": [],
    "parent": "model/DOMImporter",
    "name": "_createDefaultBlockElement",
    "params": [
      {
        "type": "ui/DOMElement",
        "shortType": "DOMElement",
        "name": "el",
        "description": ""
      }
    ],
    "returns": {
      "type": "model/DocumentNode",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/DOMImporter#_trimTextContent",
    "description": "<p>Removes any leading and trailing whitespaces from the content\nwithin the given element.\nAttention: this is not yet implemented fully. Atm, trimming is only done\non the first and last text node (if they exist).</p>\n",
    "sourceFile": "model/DOMImporter.js",
    "sourceLine": 553,
    "isPrivate": true,
    "tags": [],
    "parent": "model/DOMImporter",
    "name": "_trimTextContent",
    "params": [
      {
        "type": "util/jQuery",
        "shortType": "jQuery",
        "name": "$el",
        "description": ""
      }
    ],
    "returns": {
      "type": "util/jQuery",
      "description": "<p>an element with trimmed text</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DOMImporter#_wrapInlineElementsIntoBlockElement",
    "description": "<p>Wraps the remaining (inline) elements of a node iterator into a default\nblock node.</p>\n",
    "sourceFile": "model/DOMImporter.js",
    "sourceLine": 467,
    "isPrivate": true,
    "tags": [],
    "parent": "model/DOMImporter",
    "name": "_wrapInlineElementsIntoBlockElement",
    "params": [
      {
        "type": "model/DOMImporter.ChildIterator",
        "shortType": "DOMImporter.ChildIterator",
        "name": "childIterator",
        "description": ""
      }
    ],
    "returns": {
      "type": "model/DocumentNode",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/DOMImporter#annotatedText",
    "description": "<p>Convert annotated text. You should call this method only for elements\ncontaining rich-text.</p>\n",
    "sourceFile": "model/DOMImporter.js",
    "sourceLine": 254,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DOMImporter",
    "name": "annotatedText",
    "params": [
      {
        "type": "ui/DOMElement",
        "shortType": "DOMElement",
        "name": "el",
        "description": ""
      },
      {
        "type": "String[]",
        "shortType": "String[]",
        "name": "path",
        "description": "<p>The target property where the extracted text (plus annotations) should be stored.</p>\n"
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "options",
        "description": ""
      },
      {
        "type": "Boolean",
        "shortType": "Boolean",
        "name": "options.preserveWhitespace",
        "description": "<p>when true will preserve whitespace. Default: false.</p>\n"
      }
    ],
    "returns": {
      "type": "String",
      "description": "<p>The converted text as plain-text</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DOMImporter#convertContainer",
    "description": "<p>Converts and shows all children of a given element.</p>\n",
    "sourceFile": "model/DOMImporter.js",
    "sourceLine": 137,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DOMImporter",
    "name": "convertContainer",
    "params": [
      {
        "type": "ui/DOMElement[]",
        "shortType": "DOMElement[]",
        "name": "elements",
        "description": "<p>All elements that should be converted into the container.</p>\n"
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "containerId",
        "description": "<p>The id of the target container node.</p>\n"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "<p>the preliminary container node</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DOMImporter#convertElement",
    "description": "<p>Converts a single HTML element and creates a node in the current document.</p>\n",
    "sourceFile": "model/DOMImporter.js",
    "sourceLine": 185,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DOMImporter",
    "name": "convertElement",
    "params": [
      {
        "type": "ui/DOMElement",
        "shortType": "DOMElement",
        "name": "el",
        "description": "<p>the HTML element</p>\n"
      }
    ],
    "returns": {
      "type": "object",
      "description": "<p>the created node as JSON</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DOMImporter#customText",
    "description": "<p>Tells the converter to insert a virutal custom text.</p>\n<p>This is useful when during conversion a generated label needs to be inserted instead\nof real text.</p>\n",
    "sourceFile": "model/DOMImporter.js",
    "sourceLine": 308,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DOMImporter",
    "name": "customText",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "",
        "description": ""
      }
    ]
  },
  {
    "type": "method",
    "id": "model/DOMImporter#nextId",
    "description": "<p>Generates an id. The generated id is unique with respect to all ids generated so far.</p>\n",
    "sourceFile": "model/DOMImporter.js",
    "sourceLine": 324,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DOMImporter",
    "name": "nextId",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "a",
        "description": "<p>prefix</p>\n"
      }
    ],
    "returns": {
      "type": "String",
      "description": "<p>the generated id</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DOMImporter#plainText",
    "description": "<p>Converts the given element as plain-text.</p>\n",
    "sourceFile": "model/DOMImporter.js",
    "sourceLine": 289,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DOMImporter",
    "name": "plainText",
    "params": [
      {
        "type": "ui/DOMElement",
        "shortType": "DOMElement",
        "name": "el",
        "description": ""
      }
    ],
    "returns": {
      "type": "String",
      "description": "<p>The plain text</p>\n"
    }
  },
  {
    "type": "class",
    "id": "model/Document",
    "description": "<p>Abstract class used for deriving a custom article implementation.\nRequires a <a href=\"#nodeId=model/DocumentSchema\" data-type=\"cross-link\" data-node-id=\"model/DocumentSchema\">model/DocumentSchema</a> to be provided on construction.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> Document = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/model/Document'</span>);\n<span class=\"hljs-keyword\">var</span> articleSchema = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./myArticleSchema'</span>);\n<span class=\"hljs-keyword\">var</span> Article = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  Article.super.call(articleSchema);\n\n  <span class=\"hljs-comment\">// We set up a container that holds references to</span>\n  <span class=\"hljs-comment\">// block nodes (e.g. paragraphs and figures)</span>\n  <span class=\"hljs-keyword\">this</span>.create({\n    type: <span class=\"hljs-string\">\"container\"</span>,\n    id: <span class=\"hljs-string\">\"body\"</span>,\n    nodes: []\n  });\n};\n\nDocument.extend(Article);\n</code></pre>\n",
    "sourceFile": "model/Document.js",
    "sourceLine": 17,
    "tags": [],
    "parent": "model",
    "name": "Document",
    "members": [
      "model/Document#addIndex",
      "model/Document#contains",
      "model/Document#create",
      "model/Document#createSelection",
      "model/Document#delete",
      "model/Document#get",
      "model/Document#getIndex",
      "model/Document#getNodes",
      "model/Document#getSchema",
      "model/Document#import",
      "model/Document#set",
      "model/Document#toJSON",
      "model/Document#update",
      "model/Document@Document"
    ],
    "isAbstract": true,
    "superClass": "model/AbstractDocument"
  },
  {
    "type": "method",
    "id": "model/Document#addIndex",
    "description": "<p>Add a document index.</p>\n",
    "sourceFile": "model/Document.js",
    "sourceLine": 301,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Document",
    "name": "addIndex",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "name",
        "description": ""
      },
      {
        "type": "model/DocumentIndex",
        "shortType": "DocumentIndex",
        "name": "index",
        "description": ""
      }
    ]
  },
  {
    "type": "method",
    "id": "model/Document#contains",
    "description": "<p>Check if this storage contains a node with given id.</p>\n",
    "sourceFile": "model/Document.js",
    "sourceLine": 113,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Document",
    "name": "contains",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p><code>true</code> if a node with id exists, <code>false</code> otherwise.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Document#create",
    "description": "<p>Create a node from the given data.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">doc.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tx</span>) </span>{\n  tx.create({\n    id: <span class=\"hljs-string\">'p1'</span>,\n    type: <span class=\"hljs-string\">'paragraph'</span>,\n    content: <span class=\"hljs-string\">'Hi I am a Substance paragraph.'</span>\n  });\n});\n</code></pre>\n",
    "sourceFile": "model/Document.js",
    "sourceLine": 198,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Document",
    "name": "create",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "plain",
        "description": "<p>node data.</p>\n"
      }
    ],
    "returns": {
      "type": "DocumentNode",
      "description": "<p>The created node.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Document#createSelection",
    "description": "<p>Creates a selection which is attached to this document.\nEvery selection implementation provides its own\nparameter format which is basically a JSON representation.</p>\n",
    "example": "<p>Creating a PropertySelection:</p>\n<pre><code class=\"hljs lang-js\">doc.createSelection([ <span class=\"hljs-string\">'text1'</span>, <span class=\"hljs-string\">'content'</span>], <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>);\n</code></pre>\n<p>Creating a ContainerSelection:</p>\n<pre><code class=\"hljs lang-js\">doc.createSelection(<span class=\"hljs-string\">'main'</span>, [ <span class=\"hljs-string\">'p1'</span>, <span class=\"hljs-string\">'content'</span>], <span class=\"hljs-number\">10</span>, [ <span class=\"hljs-string\">'p2'</span>, <span class=\"hljs-string\">'content'</span>], <span class=\"hljs-number\">20</span>)\n</code></pre>\n<p>Creating a NullSelection:</p>\n<pre><code class=\"hljs lang-js\">doc.createSelection(<span class=\"hljs-literal\">null</span>);\n</code></pre>\n<p>You can also call this method with JSON data</p>\n<pre><code class=\"hljs lang-js\">doc.createSelection({\n  type: <span class=\"hljs-string\">'property'</span>,\n  path: [ <span class=\"hljs-string\">'p1'</span>, <span class=\"hljs-string\">'content'</span>],\n  startOffset: <span class=\"hljs-number\">10</span>,\n  endOffset: <span class=\"hljs-number\">20</span>\n});\n</code></pre>\n",
    "sourceFile": "model/Document.js",
    "sourceLine": 352,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Document",
    "name": "createSelection",
    "params": [
      {
        "type": "model/Selection",
        "shortType": "Selection",
        "name": "sel",
        "description": "<p>An object describing the selection.</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "model/Document#delete",
    "description": "<p>Delete the node with given id.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">doc.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tx</span>) </span>{\n  tx.delete(<span class=\"hljs-string\">'p1'</span>);\n});\n</code></pre>\n",
    "sourceFile": "model/Document.js",
    "sourceLine": 220,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Document",
    "name": "delete",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "nodeId",
        "description": ""
      }
    ],
    "returns": {
      "type": "DocumentNode",
      "description": "<p>The deleted node.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Document#get",
    "description": "<p>Get a node or value via path.</p>\n",
    "sourceFile": "model/Document.js",
    "sourceLine": 123,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Document",
    "name": "get",
    "params": [
      {
        "type": "String|String[]",
        "shortType": "String|String[]",
        "name": "path",
        "description": "<p>node id or path to property.</p>\n"
      }
    ],
    "returns": {
      "type": "DocumentNode|any",
      "description": "<p>a Node instance, a value or undefined if not found.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Document#getIndex",
    "sourceFile": "model/Document.js",
    "sourceLine": 309,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Document",
    "name": "getIndex",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "name",
        "description": ""
      }
    ],
    "returns": {
      "type": "DocumentIndex",
      "description": "<p>the node index with given name.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Document#getNodes",
    "sourceFile": "model/Document.js",
    "sourceLine": 130,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Document",
    "name": "getNodes",
    "params": [],
    "returns": {
      "type": "Object",
      "description": "<p>A hash of <a href=\"#nodeId=model/DocumentNode\" data-type=\"cross-link\" data-node-id=\"model/DocumentNode\">model/DocumentNode</a> instances.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Document#getSchema",
    "sourceFile": "model/Document.js",
    "sourceLine": 104,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Document",
    "name": "getSchema",
    "params": [],
    "returns": {
      "type": "model/DocumentSchema",
      "description": "<p>the document's schema.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Document#import",
    "description": "<p>Creates a context like a transaction for importing nodes.\nThis is important in presence of cyclic dependencies.\nIndexes will not be updated during the import but will afterwards\nwhen all nodes are have been created.</p>\n",
    "example": "<p>Consider the following example from our documentation generator:\nWe want to have a member index, which keeps track of members of namespaces, modules, and classes.\ngrouped by type, and in the case of classes, also grouped by 'instance' and 'class'.</p>\n<pre><code class=\"hljs\">ui\n  -<span class=\"ruby\"> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>\n</span>    -<span class=\"ruby\"> ui/<span class=\"hljs-constant\">Component</span>\n</span>ui/Component\n  -<span class=\"ruby\"> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>\n</span>    -<span class=\"ruby\"> method\n</span>      -<span class=\"ruby\"> mount\n</span>  -<span class=\"ruby\"> instance\n</span>    -<span class=\"ruby\"> method\n</span>      -<span class=\"ruby\"> render\n</span></code></pre>\n<p>To decide which grouping to apply, the parent type of a member needs to be considered.\nUsing an incremental approach, this leads to the problem, that the parent must exist\nbefore the child. At the same time, e.g. when deserializing, the parent has already\na field with all children ids. This cyclic dependency is best address, by turning\noff all listeners (such as indexes) until the data is consistent.</p>\n",
    "sourceFile": "model/Document.js",
    "sourceLine": 169,
    "isPrivate": true,
    "tags": [],
    "parent": "model/Document",
    "name": "import",
    "params": [
      {
        "type": "Function",
        "shortType": "Function",
        "name": "importer",
        "description": "<p>a <code>function(doc)</code>, where with <code>doc</code> is a <code>model/AbstractDocument</code></p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "model/Document#set",
    "description": "<p>Set a property to a new value.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">doc.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tx</span>) </span>{\n  tx.set([<span class=\"hljs-string\">'p1'</span>, <span class=\"hljs-string\">'content'</span>], <span class=\"hljs-string\">\"Hello there! I'm a new paragraph.\"</span>);\n});\n</code></pre>\n",
    "sourceFile": "model/Document.js",
    "sourceLine": 244,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Document",
    "name": "set",
    "params": [
      {
        "type": "String[]",
        "shortType": "String[]",
        "name": "property",
        "description": "<p>path</p>\n"
      },
      {
        "type": "any",
        "shortType": "any",
        "name": "newValue",
        "description": ""
      }
    ],
    "returns": {
      "type": "DocumentNode",
      "description": "<p>The deleted node.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Document#toJSON",
    "description": "<p>Convert to JSON.</p>\n<p>DEPRECATED: We moved away from having JSON as first-class exchange format.\nWe will remove this soon.</p>\n",
    "sourceFile": "model/Document.js",
    "sourceLine": 424,
    "isPrivate": true,
    "tags": [
      {
        "type": "deprecated",
        "value": ""
      }
    ],
    "parent": "model/Document",
    "name": "toJSON",
    "params": [],
    "returns": {
      "type": "Object",
      "description": "<p>Plain content.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Document#update",
    "description": "<p>Update a property incrementally.</p>\n",
    "example": "<p>Inserting text into a string property:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">doc</span><span class=\"hljs-class\">.update</span>([<span class=\"hljs-string\">'p1'</span>, <span class=\"hljs-string\">'content'</span>], { <span class=\"hljs-tag\">insert</span>: {<span class=\"hljs-attribute\">offset</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attribute\">value</span>: <span class=\"hljs-string\">\"fee\"</span>} });\n</code></pre>\n<p>would turn &quot;Foobar&quot; into &quot;Foofeebar&quot;.</p>\n<p>Deleting text from a string property:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">doc</span><span class=\"hljs-class\">.update</span>([<span class=\"hljs-string\">'p1'</span>, <span class=\"hljs-string\">'content'</span>], { <span class=\"hljs-tag\">delete</span>: {<span class=\"hljs-attribute\">start</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attribute\">end</span>: <span class=\"hljs-number\">3</span>} });\n</code></pre>\n<p>would turn &quot;Foobar&quot; into &quot;bar&quot;.</p>\n<p>Inserting into an array:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">doc</span><span class=\"hljs-class\">.update</span>([<span class=\"hljs-string\">'p1'</span>, <span class=\"hljs-string\">'content'</span>], { <span class=\"hljs-tag\">insert</span>: {<span class=\"hljs-attribute\">offset</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attribute\">value</span>: <span class=\"hljs-number\">0</span>} });\n</code></pre>\n<p>would turn <code>[1,2,3,4]</code> into <code>[1,2,0,3,4]</code>.</p>\n<p>Deleting from an array:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">doc</span><span class=\"hljs-class\">.update</span>(<span class=\"hljs-attr_selector\">['body', 'nodes']</span>, <span class=\"hljs-rules\">{ <span class=\"hljs-rule\"><span class=\"hljs-attribute\">delete</span>:<span class=\"hljs-value\"> <span class=\"hljs-number\">2</span> </span></span></span>});\n</code></pre>\n<p>would turn <code>[1,2,3,4]</code> into <code>[1,2,4]</code>.</p>\n",
    "sourceFile": "model/Document.js",
    "sourceLine": 287,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Document",
    "name": "update",
    "params": [
      {
        "type": "Array",
        "shortType": "Array",
        "name": "property",
        "description": "<p>path</p>\n"
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "diff",
        "description": ""
      }
    ],
    "returns": {
      "type": "any",
      "description": "<p>The value before applying the update.</p>\n"
    }
  },
  {
    "type": "ctor",
    "id": "model/Document@Document",
    "sourceFile": "model/Document.js",
    "sourceLine": 50,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Document",
    "name": "Document",
    "params": [
      {
        "type": "model/DocumentSchema",
        "shortType": "DocumentSchema",
        "name": "schema",
        "description": "<p>The document schema.</p>\n"
      }
    ]
  },
  {
    "type": "function",
    "id": "model/DocumentIndex",
    "sourceFile": "model/DocumentIndex.js",
    "sourceLine": 8,
    "tags": [],
    "parent": "model",
    "name": "DocumentIndex",
    "params": []
  },
  {
    "type": "class",
    "id": "model/DocumentNode",
    "description": "<p>Base node type for document nodes.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 16,
    "tags": [
      {
        "type": "param",
        "value": {
          "type": "model/Document",
          "shortType": "Document",
          "name": "doc",
          "description": "<p>A document instance</p>\n"
        }
      },
      {
        "type": "param",
        "value": {
          "type": "object",
          "shortType": "object",
          "name": "node",
          "description": "<p>properties</p>\n"
        }
      }
    ],
    "parent": "model",
    "name": "DocumentNode",
    "members": [
      "model/DocumentNode#getAddressablePropertyNames",
      "model/DocumentNode#getChildAt",
      "model/DocumentNode#getChildCount",
      "model/DocumentNode#getChildIndex",
      "model/DocumentNode#getDocument",
      "model/DocumentNode#getParent",
      "model/DocumentNode#getRoot",
      "model/DocumentNode#hasChildren",
      "model/DocumentNode#hasParent",
      "model/DocumentNode#isBlock",
      "model/DocumentNode#isContainerAnnotation",
      "model/DocumentNode#isInline",
      "model/DocumentNode#isPropertyAnnotation",
      "model/DocumentNode#isText",
      "model/DocumentNode.isBlock",
      "model/DocumentNode.isContainerAnnotation",
      "model/DocumentNode.isInline",
      "model/DocumentNode.isPropertyAnnotation",
      "model/DocumentNode.isText",
      "model/DocumentNode.name"
    ],
    "isAbstract": true
  },
  {
    "type": "method",
    "id": "model/DocumentNode#getAddressablePropertyNames",
    "description": "<p>This is used to be able to traverse all properties in a container.\nThis is particularly necessary for strucuted nodes, with more than one editable\ntext property.</p>\n",
    "example": "<p>For a figure node with <code>title</code>, <code>img</code>, and <code>caption</code> this could look\nbe done this way:</p>\n<pre><code class=\"hljs\">Figure<span class=\"hljs-class\">.static</span><span class=\"hljs-class\">.addressablePropertyNames</span> = [<span class=\"hljs-string\">'title'</span>, <span class=\"hljs-string\">'caption'</span>]\n</code></pre>\n<p>The img itself does not need to be addressable, as it can't be edited in the text editor.</p>\n<p>Alternatvely you can use the <code>text</code> data type in the schema, which implicitly makes\nthese properties addressable.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">Figure</span><span class=\"hljs-class\">.static</span><span class=\"hljs-class\">.defineSchema</span>(<span class=\"hljs-rules\">{\n  <span class=\"hljs-rule\"><span class=\"hljs-attribute\">title</span>:<span class=\"hljs-value\"> <span class=\"hljs-string\">\"text\"</span>,\n  img: <span class=\"hljs-string\">\"string\"</span>,\n  caption: <span class=\"hljs-string\">\"text\"</span>\n</span></span></span>});\n</code></pre>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 137,
    "isPrivate": true,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "getAddressablePropertyNames",
    "params": [],
    "returns": {
      "type": "String[]",
      "description": "<p>an array of property names</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#getChildAt",
    "description": "<p>Get a child node at a given position.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 77,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "getChildAt",
    "params": [],
    "returns": {
      "type": "DocumentNode",
      "description": "<p>default: null</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#getChildCount",
    "description": "<p>Get the number of children nodes.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 87,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "getChildCount",
    "params": [],
    "returns": {
      "type": "Number",
      "description": "<p>default: 0</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#getChildIndex",
    "description": "<p>Get the index of a given child.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 67,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "getChildIndex",
    "params": [],
    "returns": {
      "type": "Number",
      "description": "<p>default: -1</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#getDocument",
    "description": "<p>Get the Document instance.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 31,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "getDocument",
    "params": [],
    "returns": {
      "type": "Document",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#getParent",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 49,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "getParent",
    "params": [],
    "returns": {
      "type": "DocumentNode",
      "description": "<p>the parent node</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#getRoot",
    "description": "<p>Get the root node.</p>\n<p>The root node is the last ancestor returned\nby a sequence of <code>getParent()</code> calls.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 99,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "getRoot",
    "params": [],
    "returns": {
      "type": "DocumentNode",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#hasChildren",
    "description": "<p>Checks whether this node has children.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 58,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "hasChildren",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>default: false</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#hasParent",
    "description": "<p>Whether this node has a parent.</p>\n<p><code>parent</code> is a built-in property for implementing nested nodes.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 42,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "hasParent",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#isBlock",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 196,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "isBlock",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if node is a block node (e.g. Paragraph, Figure, List, Table)</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#isContainerAnnotation",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 224,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "isContainerAnnotation",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if node is a container annotation (e.g. multiparagraph comment)</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#isInline",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 217,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "isInline",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if node is an inline node (e.g. Citation)</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#isPropertyAnnotation",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 210,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "isPropertyAnnotation",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if node is an annotation node (e.g. Strong)</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/DocumentNode#isText",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 203,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "isText",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if node is a text node (e.g. Paragraph, Codebock)</p>\n"
    }
  },
  {
    "type": "property",
    "id": "model/DocumentNode.isBlock",
    "description": "<p>Declares a node to be treated as block-type node.</p>\n<p>BlockNodes are considers the direct descendant of <code>Container</code> nodes.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 245,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "isBlock",
    "dataType": "{Boolean} default: false",
    "isStatic": true
  },
  {
    "type": "property",
    "id": "model/DocumentNode.isContainerAnnotation",
    "description": "<p>Declares a node to be treated as <a href=\"#nodeId=model/ContainerAnnotation\" data-type=\"cross-link\" data-node-id=\"model/ContainerAnnotation\">model/ContainerAnnotation</a>.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 266,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "isContainerAnnotation",
    "dataType": "{Boolean} default: false",
    "isStatic": true
  },
  {
    "type": "property",
    "id": "model/DocumentNode.isInline",
    "description": "<p>Declares a node to be treated as <a href=\"#nodeId=model/InlineNode\" data-type=\"cross-link\" data-node-id=\"model/InlineNode\">model/InlineNode</a>.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 273,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "isInline",
    "dataType": "{Boolean} default: false",
    "isStatic": true
  },
  {
    "type": "property",
    "id": "model/DocumentNode.isPropertyAnnotation",
    "description": "<p>Declares a node to be treated as <a href=\"#nodeId=model/PropertyAnnotation\" data-type=\"cross-link\" data-node-id=\"model/PropertyAnnotation\">model/PropertyAnnotation</a>.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 259,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "isPropertyAnnotation",
    "dataType": "{Boolean} default: false",
    "isStatic": true
  },
  {
    "type": "property",
    "id": "model/DocumentNode.isText",
    "description": "<p>Declares a node to be treated as text-ish node.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 252,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "isText",
    "dataType": "{Boolean} default: false",
    "isStatic": true
  },
  {
    "type": "property",
    "id": "model/DocumentNode.name",
    "description": "<p>The node's name is used to register it in the DocumentSchema.</p>\n",
    "sourceFile": "model/DocumentNode.js",
    "sourceLine": 237,
    "tags": [],
    "parent": "model/DocumentNode",
    "name": "name",
    "dataType": "{String} default: 'node'",
    "isStatic": true
  },
  {
    "type": "class",
    "id": "model/DocumentSchema",
    "description": "<p>Used to define custom article formats. Predefined node types can be combined with custom ones.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> Paragraph = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/paragraph/Paragraph'</span>);\n<span class=\"hljs-keyword\">var</span> Emphasis = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/emphasis/Emphasis'</span>);\n<span class=\"hljs-keyword\">var</span> Strong = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/emphasis/Strong'</span>);\n<span class=\"hljs-keyword\">var</span> PropertyAnnotation = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/ui/PropertyAnnotation'</span>);\n\n<span class=\"hljs-keyword\">var</span> Comment = PropertyAnnotation.extend({\n  name: <span class=\"hljs-string\">'comment'</span>,\n  properties: {\n    content: <span class=\"hljs-string\">'string'</span>\n  }\n});\n\n<span class=\"hljs-keyword\">var</span> schema = <span class=\"hljs-keyword\">new</span> Document.Schema(<span class=\"hljs-string\">'my-article'</span>, <span class=\"hljs-string\">'1.0.0'</span>);\nschema.getDefaultTextType = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'paragraph'</span>;\n};\nschema.addNodes([Paragraph, Emphasis, Strong, Comment]);\n</code></pre>\n",
    "sourceFile": "model/DocumentSchema.js",
    "sourceLine": 39,
    "tags": [
      {
        "type": "param",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "name",
          "description": "<p>schema identifier</p>\n"
        }
      },
      {
        "type": "param",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "schema",
          "description": "<p>schema version</p>\n"
        }
      }
    ],
    "parent": "model",
    "name": "DocumentSchema",
    "members": [
      "model/DocumentSchema#getDefaultTextType"
    ]
  },
  {
    "type": "method",
    "id": "model/DocumentSchema#getDefaultTextType",
    "description": "<p>Returns default text type. E.g. used when hitting ENTER in a text node, which\nproduces a new node of the type returned here. Abstract method, which must be implemented.</p>\n",
    "sourceFile": "model/DocumentSchema.js",
    "sourceLine": 53,
    "isPrivate": false,
    "tags": [],
    "parent": "model/DocumentSchema",
    "name": "getDefaultTextType",
    "params": [],
    "returns": {
      "type": "String",
      "description": "<p>default text type (e.g. 'paragraph')</p>\n"
    }
  },
  {
    "type": "class",
    "id": "model/HTMLExporter",
    "example": "<p>Below is a full example taken from the <a href=\"https://github.com/substance/examples/blob/master/converter/NoteExporter.js\" target=\"_blank\">Notepad</a> example.</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> HTMLExporter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/model/HTMLExporter'</span>);\n<span class=\"hljs-keyword\">var</span> converters = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./NoteImporter'</span>).converters;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">NoteExporter</span>(<span class=\"hljs-params\"></span>) </span>{\n  NoteExporter.super.call(<span class=\"hljs-keyword\">this</span>, {\n    converters: converters,\n    containerId: <span class=\"hljs-string\">'body'</span>\n  });\n}\n\nHTMLExporter.extend(NoteExporter);\n</code></pre>\n",
    "sourceFile": "model/HTMLExporter.js",
    "sourceLine": 37,
    "tags": [],
    "parent": "model",
    "name": "HTMLExporter",
    "members": [],
    "isAbstract": true
  },
  {
    "type": "class",
    "id": "model/HTMLImporter",
    "example": "<p>Below is a full example taken from the <a href=\"https://github.com/substance/examples/blob/master/converter/NoteImporter.js\" target=\"_blank\">Notepad</a> example.</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> HTMLImporter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/model/HTMLImporter'</span>);\n<span class=\"hljs-keyword\">var</span> noteSchema = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../note/noteSchema'</span>);\n<span class=\"hljs-keyword\">var</span> Note = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../note/Note'</span>);\n\n<span class=\"hljs-keyword\">var</span> converters = [\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/paragraph/ParagraphHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/blockquote/BlockquoteHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/codeblock/CodeblockHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/heading/HeadingHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/strong/StrongHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/emphasis/EmphasisHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/link/LinkHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./MarkHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./TodoHTMLConverter'</span>)\n];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">NoteImporter</span>(<span class=\"hljs-params\"></span>) </span>{\n  NoteImporter.super.call(<span class=\"hljs-keyword\">this</span>, {\n    schema: noteSchema,\n    converters: converters,\n    DocumentClass: Note\n  });\n}\n\nNoteImporter.Prototype = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.convertDocument = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">bodyEls</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.convertContainer(bodyEls, <span class=\"hljs-string\">'body'</span>);\n  };\n};\n\n<span class=\"hljs-comment\">// Expose converters so we can reuse them in NoteHtmlExporter</span>\nNoteImporter.converters = converters;\n\nHTMLImporter.extend(NoteImporter);\n</code></pre>\n",
    "sourceFile": "model/HTMLImporter.js",
    "sourceLine": 56,
    "tags": [],
    "parent": "model",
    "name": "HTMLImporter",
    "members": [
      "model/HTMLImporter#convertDocument"
    ],
    "isAbstract": true
  },
  {
    "type": "method",
    "id": "model/HTMLImporter#convertDocument",
    "description": "<p>Orchestrates conversion of a whole document.</p>\n<p>This method should be overridden by custom importers to reflect the\nstructure of a custom HTML document or fragment, and to control where\nthings go to within the document.</p>\n",
    "example": "<p>When a fragment <code>&lt;h1&gt;Foo&lt;/h1&gt;&lt;p&gt;&lt;/Bar&lt;/p&gt;</code> is imported the implementation\nlooks like this.</p>\n<pre><code class=\"hljs lang-js\">  <span class=\"hljs-keyword\">this</span>.convertDocument = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">els</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.convertContainer(els, <span class=\"hljs-string\">'body'</span>);\n  };\n</code></pre>\n<p>If a full document <code>&lt;html&gt;&lt;body&gt;&lt;p&gt;A&lt;/p&gt;&lt;p&gt;B&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code> is imported\nyou get the <code>&lt;html&gt;</code> element instead of a node array.</p>\n<pre><code class=\"hljs lang-js\">  <span class=\"hljs-keyword\">this</span>.convertDocument = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">htmlEl</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> bodyEl = htmlEl.find(<span class=\"hljs-string\">'body'</span>);\n    <span class=\"hljs-keyword\">this</span>.convertContainer(bodyEl.children, <span class=\"hljs-string\">'body'</span>);\n  };\n</code></pre>\n",
    "sourceFile": "model/HTMLImporter.js",
    "sourceLine": 105,
    "isPrivate": false,
    "tags": [],
    "parent": "model/HTMLImporter",
    "name": "convertDocument",
    "params": [
      {
        "type": "ui/DOMElement",
        "shortType": "DOMElement",
        "name": "documentEl",
        "description": "<p>the document element.</p>\n"
      }
    ]
  },
  {
    "type": "class",
    "id": "model/PropertyAnnotation",
    "description": "<p>A property annotation can be used to overlay text and give it a special meaning.\nPropertyAnnotations only work on text properties. If you want to annotate multiple\nnodes you have to use a <a href=\"#nodeId=model/ContainerAnnotation\" data-type=\"cross-link\" data-node-id=\"model/ContainerAnnotation\">model/ContainerAnnotation</a>.</p>\n",
    "example": "<p>Here's how a <strong>strong</strong> annotation is created. In Substance annotations are stored\nseparately from the text. Annotations are just regular nodes in the document.\nThey refer to a certain range (<code>startOffset, endOffset</code>) in a text property (<code>path</code>).</p>\n<pre><code class=\"hljs lang-js\">doc.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tx</span>) </span>{\n  tx.create({\n    id: <span class=\"hljs-string\">'s1'</span>,\n    type: <span class=\"hljs-string\">'strong'</span>,\n    path: [<span class=\"hljs-string\">'p1'</span>, <span class=\"hljs-string\">'content'</span>],\n    <span class=\"hljs-string\">\"startOffset\"</span>: <span class=\"hljs-number\">10</span>,\n    <span class=\"hljs-string\">\"endOffset\"</span>: <span class=\"hljs-number\">19</span>\n  });\n});\n</code></pre>\n",
    "sourceFile": "model/PropertyAnnotation.js",
    "sourceLine": 37,
    "tags": [
      {
        "type": "prop",
        "value": {
          "type": "String[]",
          "shortType": "String[]",
          "name": "path",
          "description": "<p>Identifies a text property in the document (e.g. <code>['text_1', 'content']</code>)</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "Number",
          "shortType": "Number",
          "name": "startOffset",
          "description": "<p>the character where the annoation starts</p>\n"
        }
      },
      {
        "type": "prop",
        "value": "{Number} endOffset: the character where the annoation starts"
      }
    ],
    "parent": "model",
    "name": "PropertyAnnotation",
    "members": [
      "model/PropertyAnnotation#canSplit",
      "model/PropertyAnnotation#getText",
      "model/PropertyAnnotation#isAnchor"
    ],
    "isAbstract": true
  },
  {
    "type": "method",
    "id": "model/PropertyAnnotation#canSplit",
    "description": "<p>Determines if an annotation can be split e.g., when breaking a node.</p>\n<p>In these cases, a new annotation will be created attached to the created node.</p>\n<p>For certain annotation types,you may want to the annotation truncated\nrather than split, where you need to override this method returning <code>false</code>.</p>\n",
    "sourceFile": "model/PropertyAnnotation.js",
    "sourceLine": 66,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertyAnnotation",
    "name": "canSplit",
    "params": []
  },
  {
    "type": "method",
    "id": "model/PropertyAnnotation#getText",
    "description": "<p>Get the plain text spanned by this annotation.</p>\n",
    "sourceFile": "model/PropertyAnnotation.js",
    "sourceLine": 48,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertyAnnotation",
    "name": "getText",
    "params": [],
    "returns": {
      "type": "String",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/PropertyAnnotation#isAnchor",
    "description": "<p>If this annotation is a an Anchor.</p>\n<p>Anchors are annotations with a zero width.\nFor instance, ContainerAnnotation have a start and an end anchor,\nor rendered cursors are modeled as anchors.</p>\n",
    "sourceFile": "model/PropertyAnnotation.js",
    "sourceLine": 79,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertyAnnotation",
    "name": "isAnchor",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": ""
    }
  },
  {
    "type": "class",
    "id": "model/PropertySelection",
    "description": "<p>A selection which is bound to a property. Implements <a href=\"#nodeId=model/Selection\" data-type=\"cross-link\" data-node-id=\"model/Selection\">model/Selection</a>.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> propSel = doc.createSelection({\n  type: <span class=\"hljs-string\">'property'</span>,\n  path: [<span class=\"hljs-string\">'p1'</span>, <span class=\"hljs-string\">'content'</span>],\n  startOffset: <span class=\"hljs-number\">3</span>,\n  endOffset: <span class=\"hljs-number\">6</span>\n});\n</code></pre>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 27,
    "tags": [],
    "parent": "model",
    "name": "PropertySelection",
    "members": [
      "model/PropertySelection#collapse",
      "model/PropertySelection#contains",
      "model/PropertySelection#createWithNewRange",
      "model/PropertySelection#endOffset",
      "model/PropertySelection#expand",
      "model/PropertySelection#getEndOffset",
      "model/PropertySelection#getFragments",
      "model/PropertySelection#getPath",
      "model/PropertySelection#getStartOffset",
      "model/PropertySelection#isInsideOf",
      "model/PropertySelection#isLeftAlignedWith",
      "model/PropertySelection#isRightAlignedWith",
      "model/PropertySelection#overlaps",
      "model/PropertySelection#path",
      "model/PropertySelection#reverse",
      "model/PropertySelection#startOffset",
      "model/PropertySelection#surfaceId",
      "model/PropertySelection#toJSON",
      "model/PropertySelection#truncate"
    ],
    "superClass": "model/Selection"
  },
  {
    "type": "method",
    "id": "model/PropertySelection#collapse",
    "description": "<p>Collapse a selection to chosen direction.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 126,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "collapse",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "direction",
        "description": "<p>either left of right</p>\n"
      }
    ],
    "returns": {
      "type": "PropertySelection",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/PropertySelection#contains",
    "description": "<p>Checks if this selection contains another one.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 201,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "contains",
    "params": [
      {
        "type": "model/Selection",
        "shortType": "Selection",
        "name": "other",
        "description": ""
      },
      {
        "type": "Boolean",
        "shortType": "Boolean",
        "name": "[strict]",
        "description": "<p>true if should check that it is strictly contains the other</p>\n",
        "optional": true
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/PropertySelection#createWithNewRange",
    "description": "<p>Creates a new selection with given range and same path.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 298,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "createWithNewRange",
    "params": [
      {
        "type": "Number",
        "shortType": "Number",
        "name": "startOffset",
        "description": ""
      },
      {
        "type": "Number",
        "shortType": "Number",
        "name": "endOffset",
        "description": ""
      }
    ],
    "returns": {
      "type": "Selection",
      "description": "<p>a new selection</p>\n"
    }
  },
  {
    "type": "property",
    "id": "model/PropertySelection#endOffset",
    "description": "<p>End character position.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 46,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "endOffset",
    "dataType": "{Number}"
  },
  {
    "type": "method",
    "id": "model/PropertySelection#expand",
    "description": "<p>Expands selection to include another selection.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 277,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "expand",
    "params": [
      {
        "type": "model/Selection",
        "shortType": "Selection",
        "name": "other",
        "description": ""
      }
    ],
    "returns": {
      "type": "Selection",
      "description": "<p>a new selection</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/PropertySelection#getEndOffset",
    "description": "<p>Get end character position.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 166,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "getEndOffset",
    "params": [],
    "returns": {
      "type": "Number",
      "description": "<p>offset</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/PropertySelection#getFragments",
    "description": "<p>Return fragments for a given selection.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 338,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "getFragments",
    "params": [],
    "returns": {
      "type": "Selection.Fragment[]",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/PropertySelection#getPath",
    "description": "<p>Get path of a selection, e.g. target property where selected data is stored.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 148,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "getPath",
    "params": [],
    "returns": {
      "type": "String[]",
      "description": "<p>path</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/PropertySelection#getStartOffset",
    "description": "<p>Get start character position.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 157,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "getStartOffset",
    "params": [],
    "returns": {
      "type": "Number",
      "description": "<p>offset</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/PropertySelection#isInsideOf",
    "description": "<p>Checks if this selection is inside another one.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 177,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "isInsideOf",
    "params": [
      {
        "type": "model/Selection",
        "shortType": "Selection",
        "name": "other",
        "description": ""
      },
      {
        "type": "Boolean",
        "shortType": "Boolean",
        "name": "[strict]",
        "description": "<p>true if should check that it is strictly inside the other</p>\n",
        "optional": true
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/PropertySelection#isLeftAlignedWith",
    "description": "<p>Checks if this selection has the left boundary in common with another one.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 261,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "isLeftAlignedWith",
    "params": [
      {
        "type": "model/Selection",
        "shortType": "Selection",
        "name": "other",
        "description": ""
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/PropertySelection#isRightAlignedWith",
    "description": "<p>Checks if this selection has the right boundary in common with another one.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 245,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "isRightAlignedWith",
    "params": [
      {
        "type": "model/Selection",
        "shortType": "Selection",
        "name": "other",
        "description": ""
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/PropertySelection#overlaps",
    "description": "<p>Checks if this selection overlaps another one.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 225,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "overlaps",
    "params": [
      {
        "type": "model/Selection",
        "shortType": "Selection",
        "name": "other",
        "description": ""
      },
      {
        "type": "Boolean",
        "shortType": "Boolean",
        "name": "[strict]",
        "description": "<p>true if should check that it is strictly overlaps the other</p>\n",
        "optional": true
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": ""
    }
  },
  {
    "type": "property",
    "id": "model/PropertySelection#path",
    "description": "<p>The path to the selected property.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 34,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "path",
    "dataType": "{String[]}"
  },
  {
    "type": "property",
    "id": "model/PropertySelection#reverse",
    "description": "<p>Selection direction.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 52,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "reverse",
    "dataType": "{Boolean}"
  },
  {
    "type": "property",
    "id": "model/PropertySelection#startOffset",
    "description": "<p>Start character position.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 40,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "startOffset",
    "dataType": "{Number}"
  },
  {
    "type": "property",
    "id": "model/PropertySelection#surfaceId",
    "description": "<p>Identifier of the surface this selection should be active in.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 58,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "surfaceId",
    "dataType": "{String}"
  },
  {
    "type": "method",
    "id": "model/PropertySelection#toJSON",
    "description": "<p>Convert container selection to JSON.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 77,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "toJSON",
    "params": [],
    "returns": {
      "type": "Object",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/PropertySelection#truncate",
    "description": "<p>Creates a new selection by truncating this one by another selection.</p>\n",
    "sourceFile": "model/PropertySelection.js",
    "sourceLine": 313,
    "isPrivate": false,
    "tags": [],
    "parent": "model/PropertySelection",
    "name": "truncate",
    "params": [
      {
        "type": "model/Selection",
        "shortType": "Selection",
        "name": "other",
        "description": ""
      }
    ],
    "returns": {
      "type": "Selection",
      "description": "<p>a new selection</p>\n"
    }
  },
  {
    "type": "class",
    "id": "model/Selection",
    "description": "<p>A document selection. Refers to a Substance document model, not to the DOM.</p>\n<p>Implemented by <a href=\"#nodeId=model/PropertySelection\" data-type=\"cross-link\" data-node-id=\"model/PropertySelection\">model/PropertySelection</a> and <a href=\"#nodeId=model/ContainerSelection\" data-type=\"cross-link\" data-node-id=\"model/ContainerSelection\">model/ContainerSelection</a></p>\n",
    "sourceFile": "model/Selection.js",
    "sourceLine": 22,
    "tags": [],
    "parent": "model",
    "name": "Selection",
    "members": [
      "model/Selection#attach",
      "model/Selection#equals",
      "model/Selection#getDocument",
      "model/Selection#getFragments",
      "model/Selection#isCollapsed",
      "model/Selection#isContainerSelection",
      "model/Selection#isNull",
      "model/Selection#isPropertySelection",
      "model/Selection#isReverse",
      "model/Selection#isTableSelection",
      "model/Selection#toJSON",
      "model/Selection#toString",
      "model/Selection.Cursor",
      "model/Selection.Fragment",
      "model/Selection.NullSelection",
      "model/Selection.nullSelection"
    ],
    "isAbstract": true
  },
  {
    "type": "method",
    "id": "model/Selection#attach",
    "description": "<p>Attach document to the selection.</p>\n",
    "sourceFile": "model/Selection.js",
    "sourceLine": 53,
    "isPrivate": true,
    "tags": [],
    "parent": "model/Selection",
    "name": "attach",
    "params": [
      {
        "type": "model/Document",
        "shortType": "Document",
        "name": "doc",
        "description": "<p>document to attach</p>\n"
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/Selection#equals",
    "sourceFile": "model/Selection.js",
    "sourceLine": 107,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Selection",
    "name": "equals",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if selection equals <code>other</code> selection</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Selection#getDocument",
    "sourceFile": "model/Selection.js",
    "sourceLine": 38,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Selection",
    "name": "getDocument",
    "params": [],
    "returns": {
      "type": "Document",
      "description": "<p>The attached document instance</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Selection#getFragments",
    "description": "<p>Get selection fragments for this selection.</p>\n<p>A selection fragment is bound to a single property.</p>\n",
    "sourceFile": "model/Selection.js",
    "sourceLine": 144,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Selection",
    "name": "getFragments",
    "params": [],
    "returns": {
      "type": "Selection.Fragment[]",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/Selection#isCollapsed",
    "sourceFile": "model/Selection.js",
    "sourceLine": 93,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Selection",
    "name": "isCollapsed",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true when selection is collapsed</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Selection#isContainerSelection",
    "sourceFile": "model/Selection.js",
    "sourceLine": 75,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Selection",
    "name": "isContainerSelection",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if selection is a <a href=\"#nodeId=model/ContainerSelection\" data-type=\"cross-link\" data-node-id=\"model/ContainerSelection\">model/ContainerSelection</a></p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Selection#isNull",
    "sourceFile": "model/Selection.js",
    "sourceLine": 61,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Selection",
    "name": "isNull",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true when selection is null.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Selection#isPropertySelection",
    "sourceFile": "model/Selection.js",
    "sourceLine": 68,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Selection",
    "name": "isPropertySelection",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true for property selections</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Selection#isReverse",
    "sourceFile": "model/Selection.js",
    "sourceLine": 100,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Selection",
    "name": "isReverse",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if startOffset &lt; endOffset</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Selection#isTableSelection",
    "sourceFile": "model/Selection.js",
    "sourceLine": 86,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Selection",
    "name": "isTableSelection",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if selection is a <a href=\"#nodeId=model/TableSelection\" data-type=\"cross-link\" data-node-id=\"model/TableSelection\">model/TableSelection</a></p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/Selection#toJSON",
    "description": "<p>Convert container selection to JSON.</p>\n",
    "sourceFile": "model/Selection.js",
    "sourceLine": 134,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Selection",
    "name": "toJSON",
    "params": [],
    "returns": {
      "type": "Object",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/Selection#toString",
    "sourceFile": "model/Selection.js",
    "sourceLine": 124,
    "isPrivate": false,
    "tags": [],
    "parent": "model/Selection",
    "name": "toString",
    "params": [],
    "returns": {
      "type": "String",
      "description": "<p>This selection as human readable string.</p>\n"
    }
  },
  {
    "type": "class",
    "id": "model/Selection.Cursor",
    "description": "<p>Describe the cursor when creating selection fragments.\nThis is used for rendering selections.</p>\n",
    "sourceFile": "model/Selection.js",
    "sourceLine": 298,
    "isPrivate": true,
    "tags": [],
    "parent": "model/Selection",
    "name": "Cursor",
    "members": [],
    "isStatic": true,
    "superClass": "Anchor"
  },
  {
    "type": "class",
    "id": "model/Selection.Fragment",
    "description": "<p>A selection fragment. Used when we split a <a href=\"#nodeId=model/ContainerSelection\" data-type=\"cross-link\" data-node-id=\"model/ContainerSelection\">model/ContainerSelection</a>\ninto their fragments, each corresponding to a property selection.</p>\n",
    "sourceFile": "model/Selection.js",
    "sourceLine": 267,
    "isPrivate": true,
    "tags": [],
    "parent": "model/Selection",
    "name": "Fragment",
    "members": [],
    "isStatic": true
  },
  {
    "type": "class",
    "id": "model/Selection.NullSelection",
    "description": "<p>Class to represent null selections.</p>\n",
    "sourceFile": "model/Selection.js",
    "sourceLine": 159,
    "isPrivate": true,
    "tags": [],
    "parent": "model/Selection",
    "name": "NullSelection",
    "members": [],
    "isStatic": true
  },
  {
    "type": "property",
    "id": "model/Selection.nullSelection",
    "description": "<p>We use a singleton to represent NullSelections.</p>\n",
    "sourceFile": "model/Selection.js",
    "sourceLine": 185,
    "tags": [],
    "parent": "model/Selection",
    "name": "nullSelection",
    "dataType": "{model/Selection}",
    "isStatic": true
  },
  {
    "type": "class",
    "id": "model/TextNode",
    "description": "<p>A base class for all text-ish nodes, such as Paragraphs, Headings,\nPrerendered, etc.</p>\n",
    "sourceFile": "model/TextNode.js",
    "sourceLine": 13,
    "tags": [],
    "parent": "model",
    "name": "TextNode",
    "members": [],
    "isAbstract": true
  },
  {
    "type": "class",
    "id": "model/TransactionDocument",
    "description": "<p>A <a href=\"#nodeId=model/Document\" data-type=\"cross-link\" data-node-id=\"model/Document\">model/Document</a> instance that is used during transaction.</p>\n<p>During editing a TransactionDocument is kept up-to-date with the real one.\nWhenever a transaction is started on the document, a TransactionDocument is used to\nrecord changes, which are applied en-bloc when the transaction is saved.</p>\n",
    "example": "",
    "sourceFile": "model/TransactionDocument.js",
    "sourceLine": 34,
    "tags": [
      {
        "type": "param",
        "value": {
          "type": "model/Document",
          "shortType": "Document",
          "name": "document",
          "description": "<p>a document instance\nTo start a transaction run</p>\n<pre><code class=\"hljs\">doc.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(tx)</span> </span>{\n  <span class=\"hljs-comment\">// use tx to record changes</span>\n});\n</code></pre>\n"
        }
      }
    ],
    "parent": "model",
    "name": "TransactionDocument",
    "members": [
      "model/TransactionDocument#cancel"
    ],
    "superClass": "model/AbstractDocument"
  },
  {
    "type": "method",
    "id": "model/TransactionDocument#cancel",
    "description": "<p>Cancels the current transaction, discarding all changes recorded so far.</p>\n",
    "sourceFile": "model/TransactionDocument.js",
    "sourceLine": 99,
    "isPrivate": false,
    "tags": [],
    "parent": "model/TransactionDocument",
    "name": "cancel",
    "params": []
  },
  {
    "type": "class",
    "id": "model/XMLExporter",
    "example": "<p>Below is a full example taken from <a href=\"https://github.com/substance/lens/blob/master/model/LensArticleExporter.js\" target=\"_blank\">Lens</a>.</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> XMLExporter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/model/XMLExporter'</span>);\n<span class=\"hljs-keyword\">var</span> converters = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./LensArticleImporter'</span>).converters;\n<span class=\"hljs-keyword\">var</span> each = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'lodash/each'</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">LensArticleExporter</span>(<span class=\"hljs-params\"></span>) </span>{\n  LensArticleExporter.super.call(<span class=\"hljs-keyword\">this</span>, {\n    converters: converters,\n    containerId: <span class=\"hljs-string\">'main'</span>\n  });\n}\n\nLensArticleExporter.Prototype = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.exportDocument = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">doc</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.state.doc = doc;\n    <span class=\"hljs-keyword\">var</span> $$ = <span class=\"hljs-keyword\">this</span>.$$;\n    <span class=\"hljs-keyword\">var</span> articleEl = $$(<span class=\"hljs-string\">'article'</span>);\n\n    <span class=\"hljs-comment\">// Export ArticleMeta</span>\n    <span class=\"hljs-keyword\">var</span> metaEl = <span class=\"hljs-keyword\">this</span>.convertNode(doc.get(<span class=\"hljs-string\">'article-meta'</span>));\n    articleEl.append(metaEl);\n\n    <span class=\"hljs-comment\">// Export resources (e.g. bib items)</span>\n    <span class=\"hljs-keyword\">var</span> resourceEl = $$(<span class=\"hljs-string\">'resources'</span>);\n    <span class=\"hljs-keyword\">var</span> bibItems = doc.getIndex(<span class=\"hljs-string\">'type'</span>).get(<span class=\"hljs-string\">'bib-item'</span>);\n    each(bibItems, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">bibItem</span>) </span>{\n      <span class=\"hljs-keyword\">var</span> bibItemEl = <span class=\"hljs-keyword\">this</span>.convertNode(bibItem);\n      resourceEl.append(bibItemEl);\n    }.bind(<span class=\"hljs-keyword\">this</span>));\n    articleEl.append(resourceEl);\n\n    <span class=\"hljs-comment\">// Export article body</span>\n    <span class=\"hljs-keyword\">var</span> bodyElements = <span class=\"hljs-keyword\">this</span>.convertContainer(doc.get(<span class=\"hljs-string\">'main'</span>));\n    articleEl.append(\n      $$(<span class=\"hljs-string\">'body'</span>).append(bodyElements)\n    );\n    <span class=\"hljs-keyword\">return</span> articleEl.outerHTML;\n  };\n};\n\nXMLExporter.extend(LensArticleExporter);\n</code></pre>\n",
    "sourceFile": "model/XMLExporter.js",
    "sourceLine": 66,
    "tags": [],
    "parent": "model",
    "name": "XMLExporter",
    "members": [],
    "isAbstract": true
  },
  {
    "type": "class",
    "id": "model/XMLImporter",
    "example": "<p>Below is a full example taken from <a href=\"https://github.com/substance/lens/blob/master/model/LensArticleImporter.js\" target=\"_blank\">Lens</a>.</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> XMLImporter = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/model/XMLImporter'</span>);\n<span class=\"hljs-keyword\">var</span> articleSchema = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./articleSchema'</span>);\n<span class=\"hljs-keyword\">var</span> LensArticle = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./LensArticle'</span>);\n\n<span class=\"hljs-keyword\">var</span> converters = [\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/paragraph/ParagraphHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/blockquote/BlockquoteHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/codeblock/CodeblockHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/heading/HeadingHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/image/ImageXMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/strong/StrongHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/emphasis/EmphasisHTMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/link/LinkHTMLConverter'</span>),\n\n  <span class=\"hljs-comment\">// Lens-specific converters</span>\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../packages/metadata/MetadataXMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../packages/bibliography/BibItemXMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../packages/figures/ImageFigureXMLConverter'</span>),\n\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../packages/figures/ImageFigureCitationXMLConverter'</span>),\n  <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'../packages/bibliography/BibItemCitationXMLConverter'</span>),\n];\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">LensArticleImporter</span>(<span class=\"hljs-params\"></span>) </span>{\n  XMLImporter.call(<span class=\"hljs-keyword\">this</span>, {\n    schema: articleSchema,\n    converters: converters,\n    DocumentClass: LensArticle\n  });\n}\n\nLensArticleImporter.Prototype = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n\n  <span class=\"hljs-comment\">// XML import</span>\n  <span class=\"hljs-comment\">// &lt;article&gt;</span>\n  <span class=\"hljs-comment\">//   &lt;meta&gt;...&lt;/meta&gt;</span>\n  <span class=\"hljs-comment\">//   &lt;resources&gt;...&lt;/resources&gt;</span>\n  <span class=\"hljs-comment\">//   &lt;body&gt;...&lt;/body&gt;</span>\n  <span class=\"hljs-comment\">// &lt;/article&gt;</span>\n  <span class=\"hljs-keyword\">this</span>.convertDocument = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">articleElement</span>) </span>{\n    <span class=\"hljs-comment\">// Import meta node</span>\n    <span class=\"hljs-keyword\">var</span> metaElement = articleElement.find(<span class=\"hljs-string\">'meta'</span>);\n    <span class=\"hljs-keyword\">this</span>.convertElement(metaElement);\n\n    <span class=\"hljs-comment\">// Import resources</span>\n    <span class=\"hljs-keyword\">var</span> resources = articleElement.find(<span class=\"hljs-string\">'resources'</span>);\n    resources.children.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resource</span>) </span>{\n      <span class=\"hljs-keyword\">this</span>.convertElement(resource);\n    }.bind(<span class=\"hljs-keyword\">this</span>));\n\n    <span class=\"hljs-comment\">// Import main container</span>\n    <span class=\"hljs-keyword\">var</span> bodyNodes = articleElement.find(<span class=\"hljs-string\">'body'</span>).children;\n    <span class=\"hljs-keyword\">this</span>.convertContainer(bodyNodes, <span class=\"hljs-string\">'main'</span>);\n  };\n};\n\n<span class=\"hljs-comment\">// Expose converters so we can reuse them in NoteHtmlExporter</span>\nLensArticleImporter.converters = converters;\n\nXMLImporter.extend(LensArticleImporter);\n</code></pre>\n",
    "sourceFile": "model/XMLImporter.js",
    "sourceLine": 82,
    "tags": [],
    "parent": "model",
    "name": "XMLImporter",
    "members": [],
    "isAbstract": true
  },
  {
    "type": "namespace",
    "id": "model/data",
    "name": "data",
    "members": [
      "model/data/Data",
      "model/data/IncrementalData",
      "model/data/Node",
      "model/data/NodeIndex",
      "model/data/NodeRegistry",
      "model/data/Schema"
    ]
  },
  {
    "type": "class",
    "id": "model/data/Data",
    "description": "<p>A data storage implemention that supports data defined via a <a href=\"#nodeId=model/data/Schema\" data-type=\"cross-link\" data-node-id=\"model/data/Schema\">model/data/Schema</a>,\nand incremental updates which are backed by a OT library.</p>\n<p>It forms the underlying implementation for <a href=\"#nodeId=model/Document\" data-type=\"cross-link\" data-node-id=\"model/Document\">model/Document</a>.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 10,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data",
    "name": "Data",
    "members": [
      "model/data/Data#_startIndexing",
      "model/data/Data#_stopIndexing",
      "model/data/Data#_updateIndexes",
      "model/data/Data#addIndex",
      "model/data/Data#contains",
      "model/data/Data#create",
      "model/data/Data#delete",
      "model/data/Data#get",
      "model/data/Data#getIndex",
      "model/data/Data#getNodes",
      "model/data/Data#reset",
      "model/data/Data#set",
      "model/data/Data#toJSON",
      "model/data/Data#update",
      "model/data/Data@Data"
    ],
    "superClass": "util/EventEmitter"
  },
  {
    "type": "method",
    "id": "model/data/Data#_startIndexing",
    "description": "<p>Update all index changes from indexing queue.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 309,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Data",
    "name": "_startIndexing",
    "params": []
  },
  {
    "type": "method",
    "id": "model/data/Data#_stopIndexing",
    "description": "<p>Stops indexing process, all changes will be collected in indexing queue.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 302,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Data",
    "name": "_stopIndexing",
    "params": []
  },
  {
    "type": "method",
    "id": "model/data/Data#_updateIndexes",
    "description": "<p>Update a node index by providing of change object.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 287,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Data",
    "name": "_updateIndexes",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "change",
        "description": ""
      }
    ]
  },
  {
    "type": "method",
    "id": "model/data/Data#addIndex",
    "description": "<p>Add a node index.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 263,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Data",
    "name": "addIndex",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "name",
        "description": ""
      },
      {
        "type": "model/data/NodeIndex",
        "shortType": "NodeIndex",
        "name": "index",
        "description": ""
      }
    ]
  },
  {
    "type": "method",
    "id": "model/data/Data#contains",
    "description": "<p>Check if this storage contains a node with given id.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 48,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Data",
    "name": "contains",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p><code>true</code> if a node with id exists, <code>false</code> otherwise.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Data#create",
    "description": "<p>Create a node from the given data.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 79,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Data",
    "name": "create",
    "params": [],
    "returns": {
      "type": "Node",
      "description": "<p>The created node.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Data#delete",
    "description": "<p>Delete the node with given id.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 112,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Data",
    "name": "delete",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "nodeId",
        "description": ""
      }
    ],
    "returns": {
      "type": "Node",
      "description": "<p>The deleted node.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Data#get",
    "description": "<p>Get a node or value via path.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 58,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Data",
    "name": "get",
    "params": [
      {
        "type": "String|String[]",
        "shortType": "String|String[]",
        "name": "path",
        "description": "<p>node id or path to property.</p>\n"
      }
    ],
    "returns": {
      "type": "Node|Object|Primitive",
      "description": "<p>a Node instance, a value or undefined if not found.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Data#getIndex",
    "description": "<p>Get the node index with given name.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 278,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Data",
    "name": "getIndex",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "name",
        "description": ""
      }
    ],
    "returns": {
      "type": "NodeIndex",
      "description": "<p>The node index.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Data#getNodes",
    "description": "<p>Get the internal storage for nodes.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 70,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Data",
    "name": "getNodes",
    "params": [],
    "returns": {
      "type": "",
      "description": "<p>The internal node storage.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Data#reset",
    "description": "<p>Clear nodes.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 253,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data/Data",
    "name": "reset",
    "params": []
  },
  {
    "type": "method",
    "id": "model/data/Data#set",
    "description": "<p>Set a property to a new value.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 137,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Data",
    "name": "set",
    "params": [
      {
        "type": "Array",
        "shortType": "Array",
        "name": "property",
        "description": "<p>path</p>\n"
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "newValue",
        "description": ""
      }
    ],
    "returns": {
      "type": "Node",
      "description": "<p>The deleted node.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Data#toJSON",
    "description": "<p>Convert to JSON.</p>\n<p>DEPRECATED: We moved away from having JSON as first-class exchange format.\nWe will remove this soon.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 241,
    "isPrivate": true,
    "tags": [
      {
        "type": "deprecated",
        "value": ""
      }
    ],
    "parent": "model/data/Data",
    "name": "toJSON",
    "params": [],
    "returns": {
      "type": "Object",
      "description": "<p>Plain content.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Data#update",
    "description": "<p>Update a property incrementally.</p>\n<p>DEPRECATED: this will be replaced in Beta 3 with a more intuitive API.</p>\n",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 171,
    "isPrivate": false,
    "tags": [
      {
        "type": "deprecated",
        "value": ""
      }
    ],
    "parent": "model/data/Data",
    "name": "update",
    "params": [
      {
        "type": "Array",
        "shortType": "Array",
        "name": "property",
        "description": "<p>path</p>\n"
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "diff",
        "description": ""
      }
    ],
    "returns": {
      "type": "any",
      "description": "<p>The value before applying the update.</p>\n"
    }
  },
  {
    "type": "ctor",
    "id": "model/data/Data@Data",
    "sourceFile": "model/data/Data.js",
    "sourceLine": 26,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Data",
    "name": "Data",
    "params": [
      {
        "type": "model/data/Schema",
        "shortType": "Schema",
        "name": "schema",
        "description": ""
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "[options]",
        "description": "",
        "optional": true
      }
    ]
  },
  {
    "type": "class",
    "id": "model/data/IncrementalData",
    "description": "<p>Incremental data storage implemention.</p>\n",
    "sourceFile": "model/data/IncrementalData.js",
    "sourceLine": 11,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data",
    "name": "IncrementalData",
    "members": [
      "model/data/IncrementalData#_getDiffOp",
      "model/data/IncrementalData#apply",
      "model/data/IncrementalData#create",
      "model/data/IncrementalData#delete",
      "model/data/IncrementalData#set",
      "model/data/IncrementalData#update",
      "model/data/IncrementalData@IncrementalData"
    ],
    "superClass": "model/data/Data"
  },
  {
    "type": "method",
    "id": "model/data/IncrementalData#_getDiffOp",
    "description": "<p>Creates proper operation based on provided node path and diff.</p>\n",
    "sourceFile": "model/data/IncrementalData.js",
    "sourceLine": 142,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data/IncrementalData",
    "name": "_getDiffOp",
    "params": [
      {
        "type": "Array",
        "shortType": "Array",
        "name": "path",
        "description": ""
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "diff",
        "description": ""
      }
    ],
    "returns": {
      "type": "ObjectOperation",
      "description": "<p>operation.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/IncrementalData#apply",
    "description": "<p>Apply a given operation.</p>\n",
    "sourceFile": "model/data/IncrementalData.js",
    "sourceLine": 100,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/IncrementalData",
    "name": "apply",
    "params": [
      {
        "type": "ObjectOperation",
        "shortType": "ObjectOperation",
        "name": "op",
        "description": ""
      }
    ]
  },
  {
    "type": "method",
    "id": "model/data/IncrementalData#create",
    "description": "<p>Create a new node.</p>\n",
    "sourceFile": "model/data/IncrementalData.js",
    "sourceLine": 36,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/IncrementalData",
    "name": "create",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "nodeData",
        "description": ""
      }
    ],
    "returns": {
      "type": "ObjectOperation",
      "description": "<p>The applied operation.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/IncrementalData#delete",
    "description": "<p>Delete a node.</p>\n",
    "sourceFile": "model/data/IncrementalData.js",
    "sourceLine": 48,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/IncrementalData",
    "name": "delete",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "nodeId",
        "description": ""
      }
    ],
    "returns": {
      "type": "ObjectOperation",
      "description": "<p>The applied operation.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/IncrementalData#set",
    "description": "<p>Set a property to a new value</p>\n",
    "sourceFile": "model/data/IncrementalData.js",
    "sourceLine": 88,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/IncrementalData",
    "name": "set",
    "params": [
      {
        "type": "Array",
        "shortType": "Array",
        "name": "path",
        "description": ""
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "newValue",
        "description": ""
      }
    ],
    "returns": {
      "type": "ObjectOperation",
      "description": "<p>The applied operation.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/IncrementalData#update",
    "description": "<p>Update a property incrementally.</p>\n<p>The diff can be of the following forms (depending on the updated property type):</p>\n<ul>\n<li>String:\n<ul>\n<li><code>{ insert: { offset: Number, value: Object } }</code></li>\n<li><code>{ delete: { start: Number, end: Number } }</code></li>\n</ul>\n</li>\n<li>Array:\n<ul>\n<li><code>{ insert: { offset: Number, value: Object } }</code></li>\n<li><code>{ delete: { offset: Number } }</code></li>\n</ul>\n</li>\n</ul>\n",
    "sourceFile": "model/data/IncrementalData.js",
    "sourceLine": 74,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/IncrementalData",
    "name": "update",
    "params": [
      {
        "type": "Array",
        "shortType": "Array",
        "name": "path",
        "description": ""
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "diff",
        "description": ""
      }
    ],
    "returns": {
      "type": "ObjectOperation",
      "description": "<p>The applied operation.</p>\n"
    }
  },
  {
    "type": "ctor",
    "id": "model/data/IncrementalData@IncrementalData",
    "sourceFile": "model/data/IncrementalData.js",
    "sourceLine": 24,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/IncrementalData",
    "name": "IncrementalData",
    "params": [
      {
        "type": "model/data/Schema",
        "shortType": "Schema",
        "name": "schema",
        "description": ""
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "[options]",
        "description": "",
        "optional": true
      }
    ]
  },
  {
    "type": "class",
    "id": "model/data/Node",
    "description": "<p>Base node implementation.</p>\n",
    "sourceFile": "model/data/Node.js",
    "sourceLine": 15,
    "isPrivate": true,
    "tags": [
      {
        "type": "node",
        "value": ""
      },
      {
        "type": "param",
        "value": {
          "type": "Object",
          "shortType": "Object",
          "name": "properties",
          "description": ""
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "id",
          "description": "<p>an id that is unique within this data</p>\n"
        }
      }
    ],
    "parent": "model/data",
    "name": "Node",
    "members": [
      "model/data/Node#getPropertyType",
      "model/data/Node#getTypeNames",
      "model/data/Node#isInstanceOf",
      "model/data/Node#toJSON",
      "model/data/Node.isInstanceOf",
      "model/data/Node.name"
    ],
    "superClass": "EventEmitter"
  },
  {
    "type": "method",
    "id": "model/data/Node#getPropertyType",
    "description": "<p>Get the type of a property.</p>\n",
    "sourceFile": "model/data/Node.js",
    "sourceLine": 87,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Node",
    "name": "getPropertyType",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "propertyName",
        "description": ""
      }
    ],
    "returns": {
      "type": "",
      "description": "<p>The property's type.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Node#getTypeNames",
    "description": "<p>Get a the list of all polymorphic types.</p>\n",
    "sourceFile": "model/data/Node.js",
    "sourceLine": 71,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Node",
    "name": "getTypeNames",
    "params": [],
    "returns": {
      "type": "String[]",
      "description": "<p>An array of type names.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Node#isInstanceOf",
    "description": "<p>Check if the node is of a given type.</p>\n",
    "sourceFile": "model/data/Node.js",
    "sourceLine": 62,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Node",
    "name": "isInstanceOf",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "typeName",
        "description": ""
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if the node has a parent with given type, false otherwise.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Node#toJSON",
    "description": "<p>Convert node to JSON.</p>\n",
    "sourceFile": "model/data/Node.js",
    "sourceLine": 97,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Node",
    "name": "toJSON",
    "params": [],
    "returns": {
      "type": "Object",
      "description": "<p>JSON representation of node.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Node.isInstanceOf",
    "description": "<p>Internal implementation of Node.prototype.isInstanceOf.</p>\n",
    "sourceFile": "model/data/Node.js",
    "sourceLine": 146,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data/Node",
    "name": "isInstanceOf",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": ""
    },
    "isStatic": true
  },
  {
    "type": "property",
    "id": "model/data/Node.name",
    "description": "<p>Symbolic name for this model class. Must be set to a unique string by every subclass.</p>\n",
    "sourceFile": "model/data/Node.js",
    "sourceLine": 117,
    "tags": [],
    "parent": "model/data/Node",
    "name": "name",
    "dataType": "{String}",
    "isStatic": true
  },
  {
    "type": "class",
    "id": "model/data/NodeIndex",
    "description": "<p>Index for Nodes.</p>\n<p>Node indexes are first-class citizens in <a href=\"#nodeId=model/data/Data\" data-type=\"cross-link\" data-node-id=\"model/data/Data\">model/data/Data</a>.\nI.e., they are updated after each operation, and before any other listener is notified.</p>\n",
    "sourceFile": "model/data/NodeIndex.js",
    "sourceLine": 18,
    "tags": [],
    "parent": "model/data",
    "name": "NodeIndex",
    "members": [
      "model/data/NodeIndex#clone",
      "model/data/NodeIndex#create",
      "model/data/NodeIndex#delete",
      "model/data/NodeIndex#get",
      "model/data/NodeIndex#getAll",
      "model/data/NodeIndex#index",
      "model/data/NodeIndex#property",
      "model/data/NodeIndex#reset",
      "model/data/NodeIndex#select",
      "model/data/NodeIndex#update",
      "model/data/NodeIndex.create"
    ],
    "isAbstract": true
  },
  {
    "type": "method",
    "id": "model/data/NodeIndex#clone",
    "description": "<p>Clone this index.</p>\n",
    "sourceFile": "model/data/NodeIndex.js",
    "sourceLine": 155,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/NodeIndex",
    "name": "clone",
    "params": [],
    "returns": {
      "type": "",
      "description": "<p>A cloned NodeIndex.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/NodeIndex#create",
    "description": "<p>Called when a node has been created.</p>\n<p>Override this in subclasses for customization.</p>\n",
    "sourceFile": "model/data/NodeIndex.js",
    "sourceLine": 82,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data/NodeIndex",
    "name": "create",
    "params": [
      {
        "type": "model/data/Node",
        "shortType": "Node",
        "name": "node",
        "description": ""
      }
    ]
  },
  {
    "type": "method",
    "id": "model/data/NodeIndex#delete",
    "description": "<p>Called when a node has been deleted.</p>\n<p>Override this in subclasses for customization.</p>\n",
    "sourceFile": "model/data/NodeIndex.js",
    "sourceLine": 100,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data/NodeIndex",
    "name": "delete",
    "params": [
      {
        "type": "model/data/Node",
        "shortType": "Node",
        "name": "node",
        "description": ""
      }
    ]
  },
  {
    "type": "method",
    "id": "model/data/NodeIndex#get",
    "description": "<p>Get all indexed nodes for a given path.</p>\n",
    "sourceFile": "model/data/NodeIndex.js",
    "sourceLine": 36,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/NodeIndex",
    "name": "get",
    "params": [
      {
        "type": "Array.<String>",
        "shortType": "Array.<String>",
        "name": "path",
        "description": ""
      }
    ],
    "returns": {
      "type": "",
      "description": "<p>A node or an object with ids and nodes as values.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/NodeIndex#getAll",
    "description": "<p>Collects nodes recursively.</p>\n",
    "sourceFile": "model/data/NodeIndex.js",
    "sourceLine": 45,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/NodeIndex",
    "name": "getAll",
    "params": [],
    "returns": {
      "type": "",
      "description": "<p>An object with ids as keys and nodes as values.</p>\n"
    }
  },
  {
    "type": "property",
    "id": "model/data/NodeIndex#index",
    "description": "<p>Internal storage.</p>\n",
    "sourceFile": "model/data/NodeIndex.js",
    "sourceLine": 25,
    "isPrivate": true,
    "tags": [
      {
        "type": "property",
        "value": "{TreeIndex} index"
      }
    ],
    "parent": "model/data/NodeIndex",
    "name": "index"
  },
  {
    "type": "property",
    "id": "model/data/NodeIndex#property",
    "description": "<p>The property used for indexing.</p>\n",
    "sourceFile": "model/data/NodeIndex.js",
    "sourceLine": 55,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data/NodeIndex",
    "name": "property",
    "dataType": "{String}"
  },
  {
    "type": "method",
    "id": "model/data/NodeIndex#reset",
    "description": "<p>Reset the index using a Data instance.</p>\n",
    "sourceFile": "model/data/NodeIndex.js",
    "sourceLine": 145,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data/NodeIndex",
    "name": "reset",
    "params": []
  },
  {
    "type": "method",
    "id": "model/data/NodeIndex#select",
    "description": "<p>Check if a node should be indexed.</p>\n<p>Used internally only. Override this in subclasses to achieve a custom behavior.</p>\n",
    "sourceFile": "model/data/NodeIndex.js",
    "sourceLine": 66,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data/NodeIndex",
    "name": "select",
    "params": [
      {
        "type": "model/data/Node",
        "shortType": "Node",
        "name": "",
        "description": ""
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if the given node should be added to the index.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/NodeIndex#update",
    "description": "<p>Called when a property has been updated.</p>\n<p>Override this in subclasses for customization.</p>\n",
    "sourceFile": "model/data/NodeIndex.js",
    "sourceLine": 118,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data/NodeIndex",
    "name": "update",
    "params": [
      {
        "type": "model/data/Node",
        "shortType": "Node",
        "name": "node",
        "description": ""
      }
    ]
  },
  {
    "type": "method",
    "id": "model/data/NodeIndex.create",
    "description": "<p>Create a new NodeIndex using the given prototype as mixin.</p>\n",
    "sourceFile": "model/data/NodeIndex.js",
    "sourceLine": 180,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/NodeIndex",
    "name": "create",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "prototype",
        "description": ""
      }
    ],
    "returns": {
      "type": "model/data/NodeIndex",
      "description": "<p>A customized NodeIndex.</p>\n"
    },
    "isStatic": true
  },
  {
    "type": "class",
    "id": "model/data/NodeRegistry",
    "description": "<p>Registry for Nodes.</p>\n",
    "sourceFile": "model/data/NodeRegistry.js",
    "sourceLine": 6,
    "tags": [],
    "parent": "model/data",
    "name": "NodeRegistry",
    "members": [
      "model/data/NodeRegistry#register"
    ],
    "superClass": "util/Registry"
  },
  {
    "type": "method",
    "id": "model/data/NodeRegistry#register",
    "description": "<p>Register a Node class.</p>\n",
    "sourceFile": "model/data/NodeRegistry.js",
    "sourceLine": 23,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/NodeRegistry",
    "name": "register",
    "params": [
      {
        "type": "Class",
        "shortType": "Class",
        "name": "nodeClass",
        "description": ""
      }
    ]
  },
  {
    "type": "class",
    "id": "model/data/Schema",
    "description": "<p>Schema for Data Objects.</p>\n",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 7,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data",
    "name": "Schema",
    "members": [
      "model/data/Schema#addNodes",
      "model/data/Schema#each",
      "model/data/Schema#getBuiltIns",
      "model/data/Schema#getDefaultTextType",
      "model/data/Schema#getNodeClass",
      "model/data/Schema#getTocTypes",
      "model/data/Schema#isInstanceOf",
      "model/data/Schema#name",
      "model/data/Schema#nodeRegistry",
      "model/data/Schema#tocTypes",
      "model/data/Schema#version",
      "model/data/Schema@Schema"
    ]
  },
  {
    "type": "method",
    "id": "model/data/Schema#addNodes",
    "description": "<p>Add nodes to the schema.</p>\n",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 50,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Schema",
    "name": "addNodes",
    "params": [
      {
        "type": "Array",
        "shortType": "Array",
        "name": "nodes",
        "description": "<p>Array of Node classes</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "model/data/Schema#each",
    "description": "<p>Iterate over all registered node classes.</p>\n<p>See <a href=\"#nodeId=util/Registry#each\" data-type=\"cross-link\" data-node-id=\"util/Registry#each\">util/Registry#each</a></p>\n",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 113,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Schema",
    "name": "each",
    "params": [
      {
        "type": "Function",
        "shortType": "Function",
        "name": "callback",
        "description": ""
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "context",
        "description": ""
      }
    ]
  },
  {
    "type": "method",
    "id": "model/data/Schema#getBuiltIns",
    "description": "<p>Provide all built-in node classes.</p>\n",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 86,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data/Schema",
    "name": "getBuiltIns",
    "params": [],
    "returns": {
      "type": "Node[]",
      "description": "<p>An array of Node classes.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Schema#getDefaultTextType",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 127,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Schema",
    "name": "getDefaultTextType",
    "params": [],
    "returns": {
      "type": "String",
      "description": "<p>the name of the default textish node (e.g. 'paragraph')</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Schema#getNodeClass",
    "description": "<p>Get the node class for a type name.</p>\n",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 76,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Schema",
    "name": "getNodeClass",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "name",
        "description": ""
      }
    ],
    "returns": {
      "type": "Class",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "model/data/Schema#getTocTypes",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 120,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Schema",
    "name": "getTocTypes",
    "params": [],
    "returns": {
      "type": "Node[]",
      "description": "<p>list of types that should appear in a TOC</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/data/Schema#isInstanceOf",
    "description": "<p>Checks if a given type is of given parent type.</p>\n",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 97,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Schema",
    "name": "isInstanceOf",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "type",
        "description": ""
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "parentType",
        "description": ""
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if <code>(type instanceof parentType)</code>.</p>\n"
    }
  },
  {
    "type": "property",
    "id": "model/data/Schema#name",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 23,
    "tags": [],
    "parent": "model/data/Schema",
    "name": "name",
    "dataType": "{String}"
  },
  {
    "type": "property",
    "id": "model/data/Schema#nodeRegistry",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 32,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data/Schema",
    "name": "nodeRegistry",
    "dataType": "{NodeRegistry}"
  },
  {
    "type": "property",
    "id": "model/data/Schema#tocTypes",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 37,
    "isPrivate": true,
    "tags": [],
    "parent": "model/data/Schema",
    "name": "tocTypes",
    "dataType": "{Array} all Node classes which have `Node.static.tocType = true`"
  },
  {
    "type": "property",
    "id": "model/data/Schema#version",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 27,
    "tags": [],
    "parent": "model/data/Schema",
    "name": "version",
    "dataType": "{String}"
  },
  {
    "type": "ctor",
    "id": "model/data/Schema@Schema",
    "sourceFile": "model/data/Schema.js",
    "sourceLine": 19,
    "isPrivate": false,
    "tags": [],
    "parent": "model/data/Schema",
    "name": "Schema",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "name",
        "description": ""
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "version",
        "description": ""
      }
    ]
  },
  {
    "type": "module",
    "id": "model/documentHelpers",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> documentHelpers = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/model/documentHelpers'</span>);\ndocumentHelpers.isContainerAnnotation(doc, <span class=\"hljs-string\">'comment'</span>)\n</code></pre>\n",
    "sourceFile": "model/documentHelpers.js",
    "sourceLine": 15,
    "tags": [],
    "parent": "model",
    "name": "documentHelpers",
    "members": [
      "model/documentHelpers.getAnnotationsForSelection",
      "model/documentHelpers.getContainerAnnotationsForSelection",
      "model/documentHelpers.getPropertyAnnotationsForSelection",
      "model/documentHelpers.getTextForSelection",
      "model/documentHelpers.isContainerAnnotation"
    ]
  },
  {
    "type": "method",
    "id": "model/documentHelpers.getAnnotationsForSelection",
    "description": "<p>For a given selection, get annotations of a certain type</p>\n",
    "sourceFile": "model/documentHelpers.js",
    "sourceLine": 90,
    "isPrivate": false,
    "tags": [],
    "parent": "model/documentHelpers",
    "name": "getAnnotationsForSelection",
    "params": [
      {
        "type": "model/Document",
        "shortType": "Document",
        "name": "doc",
        "description": ""
      },
      {
        "type": "Document.Selection",
        "shortType": "Document.Selection",
        "name": "sel",
        "description": ""
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "annotationType",
        "description": ""
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "containerId",
        "description": "<p>(only needed when type is a container annotation)</p>\n"
      }
    ],
    "returns": {
      "type": "Array",
      "description": "<p>all matching annotations</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/documentHelpers.getContainerAnnotationsForSelection",
    "description": "<p>For a given selection get all container annotations</p>\n",
    "sourceFile": "model/documentHelpers.js",
    "sourceLine": 56,
    "isPrivate": false,
    "tags": [],
    "parent": "model/documentHelpers",
    "name": "getContainerAnnotationsForSelection",
    "params": [
      {
        "type": "model/Document",
        "shortType": "Document",
        "name": "doc",
        "description": ""
      },
      {
        "type": "model/Selection",
        "shortType": "Selection",
        "name": "sel",
        "description": ""
      },
      {
        "type": "model/Container",
        "shortType": "Container",
        "name": "container",
        "description": ""
      },
      {
        "type": "object",
        "shortType": "object",
        "name": "options",
        "description": ""
      }
    ],
    "returns": {
      "type": "Array",
      "description": "<p>An array of container annotations</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/documentHelpers.getPropertyAnnotationsForSelection",
    "description": "<p>For a given selection get all property annotations</p>\n",
    "sourceFile": "model/documentHelpers.js",
    "sourceLine": 35,
    "isPrivate": false,
    "tags": [],
    "parent": "model/documentHelpers",
    "name": "getPropertyAnnotationsForSelection",
    "params": [
      {
        "type": "model/Document",
        "shortType": "Document",
        "name": "doc",
        "description": ""
      },
      {
        "type": "model/Selection",
        "shortType": "Selection",
        "name": "sel",
        "description": ""
      }
    ],
    "returns": {
      "type": "model/PropertyAnnotation[]",
      "description": "<p>An array of property annotations.         Returns an empty array when selection is a container selection.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/documentHelpers.getTextForSelection",
    "description": "<p>For a given selection, get the corresponding text string</p>\n",
    "sourceFile": "model/documentHelpers.js",
    "sourceLine": 113,
    "isPrivate": false,
    "tags": [],
    "parent": "model/documentHelpers",
    "name": "getTextForSelection",
    "params": [
      {
        "type": "model/Document",
        "shortType": "Document",
        "name": "doc",
        "description": ""
      },
      {
        "type": "model/Selection",
        "shortType": "Selection",
        "name": "sel",
        "description": ""
      }
    ],
    "returns": {
      "type": "String",
      "description": "<p>text enclosed by the annotation</p>\n"
    }
  },
  {
    "type": "method",
    "id": "model/documentHelpers.isContainerAnnotation",
    "sourceFile": "model/documentHelpers.js",
    "sourceLine": 22,
    "isPrivate": false,
    "tags": [],
    "parent": "model/documentHelpers",
    "name": "isContainerAnnotation",
    "params": [
      {
        "type": "model/Document",
        "shortType": "Document",
        "name": "doc",
        "description": ""
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "type",
        "description": ""
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": "<p><code>true</code> if given type is a <a href=\"#nodeId=model/ContainerAnnotation\" data-type=\"cross-link\" data-node-id=\"model/ContainerAnnotation\">model/ContainerAnnotation</a></p>\n"
    }
  },
  {
    "type": "namespace",
    "id": "model/transform",
    "name": "transform",
    "description": "<p>Transformations are there to define higher level document operations that editor implementations can use. We implemented a range of useful transformations and made them available in the <a href=\"#nodeId=model/transform\" data-type=\"cross-link\" data-node-id=\"model/transform\">model/transform</a> folder. However, you are encouraged to define your own functions. Below is a shortened version of a possible searchAndReplace transformation.</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">searchAndReplace</span>(<span class=\"hljs-params\">tx, args</span>) </span>{\n  <span class=\"hljs-comment\">// 1. verify arguments args.searchStr, args.replaceStr, args.container</span>\n  <span class=\"hljs-comment\">// 2. implement your transformation using low level operations (e.g. tx.create)</span>\n  <span class=\"hljs-comment\">// ...</span>\n  <span class=\"hljs-keyword\">var</span> searchResult = search(tx, args);\n\n  searchResult.matches.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">match</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> replaceArgs = _.extend({}, args, {selection: match, replaceStr: args.replaceStr});\n    replaceText(tx, replaceArgs);\n  });\n\n  <span class=\"hljs-comment\">// 3. set new selection</span>\n  <span class=\"hljs-keyword\">if</span> (searchResult.matches.length &gt; <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">var</span> lastMatch = _.last(searchResult.matches);\n    args.selection = lastMatch;\n  }\n\n  <span class=\"hljs-comment\">// 4. return args for the caller or transaction context</span>\n  <span class=\"hljs-keyword\">return</span> args;\n}\n</code></pre>\n<p>Transformations always take 2 parameters: <code>tx</code> is a <code>TransactionDocument</code> and <code>args</code> are the transformation's arguments. Transformations can be composed, so in a transformation you can call another transformation. You just need to be careful to always set the args properly. Here's how the transformation we just defined can be called in a transaction.</p>\n<pre><code class=\"hljs lang-js\">surface.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tx, args</span>) </span>{\n  args.searchStr = <span class=\"hljs-string\">\"foo\"</span>;\n  args.replaceStr = <span class=\"hljs-string\">\"bar\"</span>;\n  <span class=\"hljs-keyword\">return</span> searchAndReplace(tx, args);\n});\n</code></pre>\n<p>Using the transaction method on a <a href=\"#nodeId=ui/Surface\" data-type=\"cross-link\" data-node-id=\"ui/Surface\">ui/Surface</a> instance passes the current selection to the transformation automatically. So you will use surface transactions whenever some kind of selection is involved in your action. However, you could also provide the selection manually and call <code>transaction()</code> on the document or app controller instance. Make sure that your transformations are robust for both scenarios. If you look at the above example under (3) we set the selection to the last matched element after search and replace. If something has been found.</p>\n",
    "members": [
      "model/transform/breakNode",
      "model/transform/copySelection",
      "model/transform/createAnnotation",
      "model/transform/deleteSelection",
      "model/transform/insertInlineNode",
      "model/transform/insertNode",
      "model/transform/insertText",
      "model/transform/paste",
      "model/transform/switchTextType"
    ]
  },
  {
    "type": "function",
    "id": "model/transform/breakNode",
    "description": "<p>A transformation that breaks a node at the current position,\ne.g. used when you hit ENTER inside a paragraph.</p>\n",
    "sourceFile": "model/transform/breakNode.js",
    "sourceLine": 18,
    "tags": [
      {
        "type": "function",
        "value": ""
      }
    ],
    "parent": "model/transform",
    "name": "breakNode",
    "params": [
      {
        "type": "model/TransactionDocument",
        "shortType": "TransactionDocument",
        "name": "tx",
        "description": "<p>the document instance</p>\n"
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "args",
        "description": "<p>object with fields <code>selection</code>, <code>containerId</code></p>\n"
      }
    ]
  },
  {
    "type": "function",
    "id": "model/transform/copySelection",
    "description": "<p>Creates a new document instance containing only the selected content</p>\n",
    "sourceFile": "model/transform/copySelection.js",
    "sourceLine": 20,
    "tags": [],
    "parent": "model/transform",
    "name": "copySelection",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "args",
        "description": "<p>object with <code>selection</code></p>\n"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "<p>with a <code>doc</code> property that has a fresh doc with the copied content</p>\n"
    }
  },
  {
    "type": "function",
    "id": "model/transform/createAnnotation",
    "description": "<p>For a given container selection create property selections of a given type</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">createAnnotation(tx, {\n  selection: bodyEditor.getSelection(),\n  containerId: bodyEditor.getContainerId(),\n\n  node: {\n    type: <span class=\"hljs-string\">'link'</span>,\n    url: <span class=\"hljs-string\">'http://example.com'</span>\n  }\n});\n</code></pre>\n",
    "sourceFile": "model/transform/createAnnotation.js",
    "sourceLine": 34,
    "tags": [
      {
        "type": "function",
        "value": ""
      },
      {
        "type": "scopedparam",
        "value": "{model/Selection} args.selection A document selection"
      },
      {
        "type": "scopedparam",
        "value": "{String} args.containerId a valid container id"
      },
      {
        "type": "scopedparam",
        "value": "{Object} args.node data describing the annotation node"
      }
    ],
    "parent": "model/transform",
    "name": "createAnnotation",
    "params": [
      {
        "type": "model/TransactionDocument",
        "shortType": "TransactionDocument",
        "name": "tx",
        "description": "<p>the document instance</p>\n"
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "args",
        "description": "<p>object with transformation arguments <code>selection</code>, <code>containerId</code>, <code>annotationType</code> and <code>annotationData</code></p>\n"
      }
    ]
  },
  {
    "type": "function",
    "id": "model/transform/deleteSelection",
    "description": "<p>Deletes a given selection.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">deleteSelection(tx, {\n  selection: bodyEditor.getSelection(),\n});\n</code></pre>\n",
    "sourceFile": "model/transform/deleteSelection.js",
    "sourceLine": 28,
    "tags": [],
    "parent": "model/transform",
    "name": "deleteSelection",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "args",
        "description": "<p>object with <code>selection</code></p>\n"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "<p>with updated <code>selection</code></p>\n"
    }
  },
  {
    "type": "function",
    "id": "model/transform/insertInlineNode",
    "description": "<p>Inserts a new inline node at the given selection/cursor.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">insertInlineNode(tx, {\n  selection: bodyEditor.getSelection(),\n  containerId: bodyEditor.getContainerId(),\n  node: {\n    type: <span class=\"hljs-string\">'citation'</span>\n  }\n});\n</code></pre>\n",
    "sourceFile": "model/transform/insertInlineNode.js",
    "sourceLine": 26,
    "tags": [],
    "parent": "model/transform",
    "name": "insertInlineNode",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "args",
        "description": "<p>object with <code>selection</code>, <code>containerId</code> and <code>node</code> that has the node data</p>\n"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "<p>object with updated selection</p>\n"
    }
  },
  {
    "type": "function",
    "id": "model/transform/insertNode",
    "description": "<p>Inserts a new node at the given selection/cursor.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">insertNode(tx, {\n  selection: bodyEditor.getSelection(),\n  containerId: bodyEditor.getContainerId(),\n  node: {\n    id: <span class=\"hljs-string\">'nodeId'</span>,\n    type: <span class=\"hljs-string\">'paragraph'</span>,\n    content: <span class=\"hljs-string\">'hello'</span>\n  }\n});\n</code></pre>\n",
    "sourceFile": "model/transform/insertNode.js",
    "sourceLine": 28,
    "tags": [],
    "parent": "model/transform",
    "name": "insertNode",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "args",
        "description": "<p>object with <code>selection</code>, <code>containerId</code> and <code>node</code> that has the node data</p>\n"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "<p>object with updated selection</p>\n"
    }
  },
  {
    "type": "function",
    "id": "model/transform/insertText",
    "description": "<p>Inserts text at the given selection.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">insertText(tx, {\n  selection: bodyEditor.getSelection(),\n  text: <span class=\"hljs-string\">'Guten Tag'</span>\n});\n</code></pre>\n",
    "sourceFile": "model/transform/insertText.js",
    "sourceLine": 23,
    "tags": [],
    "parent": "model/transform",
    "name": "insertText",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "args",
        "description": "<p>object with <code>selection</code>, <code>text</code></p>\n"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "<p>object with updated <code>selection</code></p>\n"
    }
  },
  {
    "type": "function",
    "id": "model/transform/paste",
    "description": "<p>Pastes clipboard content at the current selection</p>\n",
    "sourceFile": "model/transform/paste.js",
    "sourceLine": 24,
    "tags": [],
    "parent": "model/transform",
    "name": "paste",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "args",
        "description": "<p>object with <code>selection</code> and <code>doc</code> for Substance content or <code>text</code> for external HTML content</p>\n"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "<p>with updated <code>selection</code></p>\n"
    }
  },
  {
    "type": "function",
    "id": "model/transform/switchTextType",
    "description": "<p>Switch text type for a given node. E.g. from <code>paragraph</code> to <code>heading</code>.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">switchTextType(tx, {\n  selection: bodyEditor.getSelection(),\n  containerId: bodyEditor.getContainerId(),\n  data: {\n    type: <span class=\"hljs-string\">'heading'</span>,\n    level: <span class=\"hljs-number\">2</span>\n  }\n});\n</code></pre>\n",
    "sourceFile": "model/transform/switchTextType.js",
    "sourceLine": 28,
    "tags": [],
    "parent": "model/transform",
    "name": "switchTextType",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "args",
        "description": "<p>object with <code>selection</code>, <code>containerId</code> and <code>data</code> with new node data</p>\n"
      }
    ],
    "returns": {
      "type": "Object",
      "description": "<p>object with updated <code>selection</code></p>\n"
    }
  },
  {
    "type": "namespace",
    "id": "ui",
    "name": "ui",
    "description": "<p>Provides all UI-related functionality. At the heart there is a Component implementation, which implements reactive rendering engine. We provide a range of ready-to use components that you can use to assemble your app.</p>\n",
    "members": [
      "ui/AnnotatedTextComponent",
      "ui/AnnotationCommand",
      "ui/AnnotationComponent",
      "ui/Clipboard",
      "ui/ClipboardImporter",
      "ui/Command",
      "ui/Component",
      "ui/ContainerAnnotator",
      "ui/ContainerEditor",
      "ui/Controller",
      "ui/ControllerCommand",
      "ui/ControllerTool",
      "ui/DOMElement",
      "ui/DefaultDOMElement",
      "ui/Highlights",
      "ui/ScrollPane",
      "ui/Scrollbar",
      "ui/SplitPane",
      "ui/Surface",
      "ui/SurfaceCommand",
      "ui/SurfaceTool",
      "ui/TOC",
      "ui/TabbedPane",
      "ui/TextPropertyAnnotator",
      "ui/TextPropertyComponent",
      "ui/TextPropertyEditor",
      "ui/Tool",
      "ui/Toolbar",
      "ui/VirtualDOMElement"
    ]
  },
  {
    "type": "class",
    "id": "ui/AnnotatedTextComponent",
    "description": "<p>Renders an anotated text. Used internally by <a href=\"#nodeId=ui/TextPropertyComponent\" data-type=\"cross-link\" data-node-id=\"ui/TextPropertyComponent\">ui/TextPropertyComponent</a>.</p>\n",
    "sourceFile": "ui/AnnotatedTextComponent.js",
    "sourceLine": 16,
    "tags": [
      {
        "type": "component",
        "value": ""
      }
    ],
    "parent": "ui",
    "name": "AnnotatedTextComponent",
    "members": [
      "ui/AnnotatedTextComponent#getDocument",
      "ui/AnnotatedTextComponent#render"
    ],
    "superClass": "ui/Component"
  },
  {
    "type": "method",
    "id": "ui/AnnotatedTextComponent#getDocument",
    "description": "<p>Gets document instance.</p>\n",
    "sourceFile": "ui/AnnotatedTextComponent.js",
    "sourceLine": 92,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/AnnotatedTextComponent",
    "name": "getDocument",
    "params": [],
    "returns": {
      "type": "Document",
      "description": "<p>The document instance</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/AnnotatedTextComponent#render",
    "description": "<p>Node render implementation. Use model/Fragmenter for rendering of annotations.</p>\n",
    "sourceFile": "ui/AnnotatedTextComponent.js",
    "sourceLine": 33,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/AnnotatedTextComponent",
    "name": "render",
    "params": [],
    "returns": {
      "type": "VirtualNode",
      "description": "<p>VirtualNode created using ui/Component</p>\n"
    }
  },
  {
    "type": "class",
    "id": "ui/AnnotationCommand",
    "description": "<p>A class for commands intended to be executed on the annotations.\nSee the example below to learn how to define a custom <code>AnnotationCommand</code>.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> AnnotationCommand = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/ui/AnnotationCommand'</span>);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SmallCapsCommand</span>(<span class=\"hljs-params\"></span>) </span>{\n  SmallCaps.super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n}\n\n<span class=\"hljs-keyword\">var</span> SmallCapsCommand = AnnotationCommand.extend();\n\nSmallCapsCommand.static.name = <span class=\"hljs-string\">'smallcaps'</span>;\nSmallCapsCommand.static.annotationType = <span class=\"hljs-string\">'smallcaps'</span>;\n</code></pre>\n",
    "sourceFile": "ui/AnnotationCommand.js",
    "sourceLine": 36,
    "tags": [],
    "parent": "ui",
    "name": "AnnotationCommand",
    "members": [
      "ui/AnnotationCommand#canTruncate",
      "ui/AnnotationCommand#getAnnotationData",
      "ui/AnnotationCommand#getAnnotationType",
      "ui/AnnotationCommand#getAnnotationsForSelection",
      "ui/AnnotationCommand#getCommandState",
      "ui/AnnotationCommand#isDisabled"
    ],
    "superClass": "ui/SurfaceCommand"
  },
  {
    "type": "method",
    "id": "ui/AnnotationCommand#canTruncate",
    "description": "<p>Checks if annotation could be truncated.\nThere should be overlap with only a single annotation,\nselection should also have boundary in common with this annotation.</p>\n",
    "sourceFile": "ui/AnnotationCommand.js",
    "sourceLine": 163,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/AnnotationCommand",
    "name": "canTruncate",
    "params": [
      {
        "type": "Array",
        "shortType": "Array",
        "name": "annos",
        "description": "<p>annotations</p>\n"
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "sel",
        "description": "<p>selection</p>\n"
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": "<p>Whether or not annotation could be truncated.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/AnnotationCommand#getAnnotationData",
    "description": "<p>Get the annotation's data.</p>\n",
    "sourceFile": "ui/AnnotationCommand.js",
    "sourceLine": 60,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/AnnotationCommand",
    "name": "getAnnotationData",
    "params": [],
    "returns": {
      "type": "Object",
      "description": "<p>The annotation's data.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/AnnotationCommand#getAnnotationType",
    "description": "<p>Get the type of an annotation.</p>\n",
    "sourceFile": "ui/AnnotationCommand.js",
    "sourceLine": 47,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/AnnotationCommand",
    "name": "getAnnotationType",
    "params": [],
    "returns": {
      "type": "String",
      "description": "<p>The annotation's type.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/AnnotationCommand#getAnnotationsForSelection",
    "description": "<p>Gets annotations for current selection.</p>\n",
    "sourceFile": "ui/AnnotationCommand.js",
    "sourceLine": 177,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/AnnotationCommand",
    "name": "getAnnotationsForSelection",
    "params": [],
    "returns": {
      "type": "Array",
      "description": "<p>annos Annotations.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/AnnotationCommand#getCommandState",
    "description": "<p>Gets command state object.</p>\n",
    "sourceFile": "ui/AnnotationCommand.js",
    "sourceLine": 221,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/AnnotationCommand",
    "name": "getCommandState",
    "params": [],
    "returns": {
      "type": "Object",
      "description": "<p>info object with command details.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/AnnotationCommand#isDisabled",
    "description": "<p>Checks if command couldn't be executed with current selection.</p>\n",
    "sourceFile": "ui/AnnotationCommand.js",
    "sourceLine": 72,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/AnnotationCommand",
    "name": "isDisabled",
    "params": [
      {
        "type": "Array",
        "shortType": "Array",
        "name": "annos",
        "description": "<p>annotations</p>\n"
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "sel",
        "description": "<p>selection</p>\n"
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": "<p>Whether or not command could be executed.</p>\n"
    }
  },
  {
    "type": "class",
    "id": "ui/AnnotationComponent",
    "description": "<p>Renders an annotation. Used internally by different components (e.g. ui/AnnotatedTextComponent)</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">$$(AnnotationComponent, {\n  doc: doc,\n  node: node\n})\n</code></pre>\n",
    "sourceFile": "ui/AnnotationComponent.js",
    "sourceLine": 26,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": {
          "type": "Object",
          "shortType": "Object",
          "name": "doc",
          "description": "<p>document</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "Object",
          "shortType": "Object",
          "name": "node",
          "description": "<p>node which describes annotation</p>\n"
        }
      }
    ],
    "parent": "ui",
    "name": "AnnotationComponent",
    "members": [],
    "superClass": "ui/Component"
  },
  {
    "type": "class",
    "id": "ui/Clipboard",
    "description": "<p>The Clipboard is a Component which should be rendered as a sibling component\nof one or multiple Surfaces.</p>\n<p>It uses the JSONImporter and JSONExporter for internal copy'n'pasting,\ni.e., within one window or between two instances with the same DocumentSchema.</p>\n<p>For inter-application copy'n'paste, the ClipboardImporter and ClipboardExporter is used.\nFor HTML coming from the clipboard we support a fixed set of content types:</p>\n<ul>\n<li>Paragraph</li>\n<li>Heading</li>\n<li>Strong/Bold</li>\n<li>Emphasis/Italic</li>\n<li>Link</li>\n<li>Table</li>\n<li>List</li>\n</ul>\n<p>To make this work for a custom schema, you must include the default nodes into your schema.\nOtherwise, only plain text will be copied. If <code>Paragraph</code> is not present in your schema,\n<code>schema.getDefaultTextType()</code> is used instead.</p>\n",
    "sourceFile": "ui/Clipboard.js",
    "sourceLine": 10,
    "tags": [],
    "parent": "ui",
    "name": "Clipboard",
    "members": []
  },
  {
    "type": "function",
    "id": "ui/ClipboardImporter",
    "description": "<p>Import HTML from clipboard. Used for inter-application copy'n'paste.</p>\n",
    "sourceFile": "ui/ClipboardImporter.js",
    "sourceLine": 36,
    "tags": [],
    "parent": "ui",
    "name": "ClipboardImporter",
    "params": []
  },
  {
    "type": "class",
    "id": "ui/Command",
    "description": "<p>Abstract interface for commands.</p>\n",
    "sourceFile": "ui/Command.js",
    "sourceLine": 11,
    "tags": [],
    "parent": "ui",
    "name": "Command",
    "members": [
      "ui/Command#execute"
    ]
  },
  {
    "type": "method",
    "id": "ui/Command#execute",
    "description": "<p>Execute command</p>\n",
    "sourceFile": "ui/Command.js",
    "sourceLine": 22,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Command",
    "name": "execute",
    "params": [],
    "returns": {
      "type": "Object",
      "description": "<p>info object with execution details</p>\n"
    }
  },
  {
    "type": "class",
    "id": "ui/Component",
    "description": "<p>A light-weight component implementation inspired by React and Ember. In contrast to the\nlarge frameworks it does much less things automagically in favour of synchronous\nrendering and a minimalistic life-cycle. It also provides <em>up-tree</em>\ncommunication and <em>dependency injection</em>.</p>\n<p>Concepts:</p>\n<ul>\n<li>\n<p><code>props</code> are provided by a parent component.  An initial set of properties is provided\nvia constructor. After that, the parent component can call <code>setProps</code> or <code>extendProps</code>\nto update these properties which triggers rerendering if the properties change.</p>\n</li>\n<li>\n<p><code>state</code> is a set of flags and values which are used to control how the component\ngets rendered given the current props. Using <code>setState</code> the component can change\nits internal state, which leads to a rerendering if the state changes.</p>\n</li>\n<li>\n<p>A child component with a <code>ref</code> id will be reused on rerender. All others will be\nwiped and rerender from scratch. If you want to preserve a grand-child (or lower), then\nmake sure that all anchestors have a ref id. After rendering the child will be\naccessible via <code>this.refs[ref]</code>.</p>\n</li>\n<li>\n<p>A component can send actions via <code>send</code> which are bubbled up through all parent\ncomponents until one handles it.</p>\n</li>\n</ul>\n",
    "example": "<p>Define a component:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> HelloMessage = Component.extend({\n  render: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> $$(<span class=\"hljs-string\">'div'</span>).append(\n      <span class=\"hljs-string\">'Hello '</span>,\n      <span class=\"hljs-keyword\">this</span>.props.name\n    );\n  }\n});\n</code></pre>\n<p>And mount it to a DOM Element:</p>\n<pre><code class=\"hljs\">Component.mount(\n  $$(HelloMessage, {name: <span class=\"hljs-string\">'John'</span>}),\n  <span class=\"hljs-built_in\">document</span>.body\n);\n</code></pre>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 78,
    "tags": [
      {
        "type": "implements",
        "value": "util/EventEmitter"
      }
    ],
    "parent": "ui",
    "name": "Component",
    "members": [
      "ui/Component#append",
      "ui/Component#didMount",
      "ui/Component#didReceiveProps",
      "ui/Component#didRender",
      "ui/Component#didUpdateState",
      "ui/Component#dispose",
      "ui/Component#empty",
      "ui/Component#extendProps",
      "ui/Component#extendState",
      "ui/Component#getChildContext",
      "ui/Component#getInitialState",
      "ui/Component#getParent",
      "ui/Component#getProps",
      "ui/Component#getState",
      "ui/Component#handleAction",
      "ui/Component#handleActions",
      "ui/Component#htmlProp",
      "ui/Component#insertAt",
      "ui/Component#isMounted",
      "ui/Component#removeAt",
      "ui/Component#removeHtmlProp",
      "ui/Component#render",
      "ui/Component#rerender",
      "ui/Component#send",
      "ui/Component#setProps",
      "ui/Component#setState",
      "ui/Component#shouldRerender",
      "ui/Component#triggerDidMount",
      "ui/Component#triggerDispose",
      "ui/Component#unmount",
      "ui/Component#willReceiveProps",
      "ui/Component#willRender",
      "ui/Component#willUpdateState",
      "ui/Component.isMounted",
      "ui/Component.mount",
      "ui/Component.render"
    ],
    "isAbstract": true,
    "superClass": "ui/DefaultDOMElement"
  },
  {
    "type": "method",
    "id": "ui/Component#append",
    "description": "<p>Append a child component created using <a href=\"#nodeId=ui/Component.$$\" data-type=\"cross-link\" data-node-id=\"ui/Component.$$\">ui/Component.$$</a>.</p>\n<p>Part of the incremental updating API.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 737,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "append",
    "params": [
      {
        "type": "ui/Component.VirtualNode",
        "shortType": "Component.VirtualNode",
        "name": "child",
        "description": "<p>the child component</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "ui/Component#didMount",
    "description": "<p>Called when the element is inserted into the DOM.</p>\n<p>Node: make sure that you call <code>component.mount(el)</code> using an element\nwhich is already in the DOM.</p>\n",
    "example": "<pre><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> component = <span class=\"hljs-keyword\">new</span> MyComponent();\ncomponent.mount($(<span class=\"hljs-string\">'body'</span>)[<span class=\"hljs-number\">0</span>])\n</code></pre>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 289,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "didMount",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#didReceiveProps",
    "description": "<p>Hook which is called after properties have been set.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 544,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "didReceiveProps",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#didRender",
    "description": "<p>Hook which is called after each render.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 554,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "didRender",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#didUpdateState",
    "description": "<p>Hook which is called after the state has updated.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 486,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "didUpdateState",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#dispose",
    "description": "<p>A hook which is called when the component is unmounted, i.e. removed from DOM, hence disposed</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 333,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "dispose",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#empty",
    "description": "<p>Remove(/unmount) all child components.</p>\n<p>Part of the incremental updating API.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 785,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "empty",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#extendProps",
    "description": "<p>Extends the properties of the component, without reppotentially leading to a rerender.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 511,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "extendProps",
    "params": [
      {
        "type": "object",
        "shortType": "object",
        "name": "an",
        "description": "<p>object with properties</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "ui/Component#extendState",
    "description": "<p>This is similar to <code>setState()</code> but extends the existing state instead of replacing it.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 470,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "extendState",
    "params": [
      {
        "type": "object",
        "shortType": "object",
        "name": "newState",
        "description": "<p>an object with a partial update.</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "ui/Component#getChildContext",
    "description": "<p>Provides the context which is delivered to every child component. Override if you want to\nprovide your own child context.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 159,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "getChildContext",
    "params": [],
    "returns": {
      "type": "",
      "description": "<p>object the child context</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Component#getInitialState",
    "description": "<p>Provide the initial component state.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 172,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "getInitialState",
    "params": [],
    "returns": {
      "type": "",
      "description": "<p>object the initial state</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Component#getParent",
    "description": "<p>Provides the parent of this component.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 181,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "getParent",
    "params": [],
    "returns": {
      "type": "",
      "description": "<p>object the parent component or null if this component does not have a parent.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Component#getProps",
    "description": "<p>Get the current properties</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 521,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "getProps",
    "params": [],
    "returns": {
      "type": "Object",
      "description": "<p>the current state</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Component#getState",
    "description": "<p>Get the current component state</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 530,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "getState",
    "params": [],
    "returns": {
      "type": "Object",
      "description": "<p>the current state</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Component#handleAction",
    "description": "<p>Define an action handler. Call this during construction/initialization of a component.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 394,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "handleAction",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "action",
        "description": "<p>name</p>\n"
      },
      {
        "type": "Functon",
        "shortType": "Functon",
        "name": "a",
        "description": "<p>function of this component.</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "ui/Component#handleActions",
    "description": "<p>Define action handlers. Call this during construction/initialization of a component.</p>\n",
    "example": "<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n  Component.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n  ...\n  <span class=\"hljs-keyword\">this</span>.handleActions({\n   <span class=\"hljs-string\">'openPrompt'</span>: <span class=\"hljs-keyword\">this</span>.openPrompt,\n   <span class=\"hljs-string\">'closePrompt'</span>: <span class=\"hljs-keyword\">this</span>.closePrompt\n  });\n}\n</code></pre>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 373,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "handleActions",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#htmlProp",
    "description": "<p>Get or set HTML properties analog to <a href=\"http://api.jquery.com/prop\" target=\"_blank\">jQuery.prop</a>.</p>\n<p>Note: we can't follow jquery's method name here, as it brings a semantical\nconflict/confusion with the component's setProps API.\n<code>$.prop</code> is used less often, thus it should be acceptable to deviate from jquery.\nIn fact, we have not used <code>$.prop</code> at all so far, as we haven't made use\nof input fields and such where you have a lot of html properties.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 808,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "htmlProp",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#insertAt",
    "description": "<p>Insert a child component created using Component.$$ at a given position.</p>\n<p>Part of the incremental updating API.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 754,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "insertAt",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#isMounted",
    "sourceFile": "ui/Component.js",
    "sourceLine": 314,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "isMounted",
    "params": [],
    "returns": {
      "type": "",
      "description": "<p>a boolean indicating if this component is mounted.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Component#removeAt",
    "description": "<p>Remove(/unmount) the child component at a given position.</p>\n<p>Part of the incremental updating API.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 773,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "removeAt",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#removeHtmlProp",
    "description": "<p>Remove HTML properties analog to <a href=\"http://api.jquery.com/removeProp/\" target=\"_blank\">jQuery.removeProp</a></p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 823,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "removeHtmlProp",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#render",
    "description": "<p>Render the component.</p>\n<p>ATTENTION: this does not create a DOM presentation but\na virtual representation which is compiled into a DOM element later.</p>\n<p>Every Component should override this method.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 200,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "render",
    "params": [],
    "returns": {
      "type": "VirtualNode",
      "description": "<p>VirtualNode created using Component.$$</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Component#rerender",
    "description": "<p>Rerenders the component.</p>\n<p>Call this to manually trigger a rerender.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 224,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "rerender",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#send",
    "description": "<p>Send an action request to the parent component, bubbling up the component\nhierarchy until an action handler is found.</p>\n",
    "example": "",
    "sourceFile": "ui/Component.js",
    "sourceLine": 344,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "send",
    "params": [
      {
        "type": "",
        "shortType": "",
        "name": "action",
        "description": "<p>the name of the action</p>\n"
      },
      {
        "type": "",
        "shortType": "",
        "name": "...",
        "description": "<p>arbitrary number of arguments</p>\n"
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if the action was handled, false otherwise</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Component#setProps",
    "description": "<p>Sets the properties of this component, potentially leading to a rerender.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 493,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "setProps",
    "params": [
      {
        "type": "object",
        "shortType": "object",
        "name": "an",
        "description": "<p>object with properties</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "ui/Component#setState",
    "description": "<p>Sets the state of this component, potentially leading to a rerender.</p>\n<p>Usually this is used by the component itself.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 407,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "setState",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#shouldRerender",
    "description": "<p>Determines if Component.rerender() should be run after\nchanging props or state.</p>\n<p>The default implementation performs a deep equal check.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 214,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "shouldRerender",
    "params": [],
    "returns": {
      "type": "",
      "description": "<p>a boolean indicating whether rerender() should be run.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Component#triggerDidMount",
    "description": "<p>Triggers didMount handlers recursively.</p>\n<p>Gets called when using <code>component.mount(el)</code> on an element being\nin the DOM already. Typically this is done for a root component.</p>\n<p>If this is not possible because you want to do things differently, make sure\nyou call 'component.triggerDidMount()' on root components.</p>\n",
    "example": "<pre><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> frag = <span class=\"hljs-built_in\">document</span>.createDocumentFragment();\n<span class=\"hljs-keyword\">var</span> comp = Component.mount($$(MyComponent), frag);\n...\n$(<span class=\"hljs-string\">'body'</span>).append(frag);\ncomp.triggerDidMount();\n</code></pre>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 252,
    "isPrivate": true,
    "tags": [],
    "parent": "ui/Component",
    "name": "triggerDidMount",
    "params": [
      {
        "type": "",
        "shortType": "",
        "name": "isMounted",
        "description": "<p>an optional param for optimization, it's used mainly internally</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "ui/Component#triggerDispose",
    "description": "<p>Triggers dispose handlers recursively.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 323,
    "isPrivate": true,
    "tags": [],
    "parent": "ui/Component",
    "name": "triggerDispose",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#unmount",
    "description": "<p>Removes this component from its parent.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 297,
    "isPrivate": true,
    "tags": [
      {
        "type": "chainable",
        "value": ""
      }
    ],
    "parent": "ui/Component",
    "name": "unmount",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#willReceiveProps",
    "description": "<p>Hook which is called before properties are updated. Use this to dispose objects which will be replaced when properties change.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 537,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "willReceiveProps",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#willRender",
    "description": "<p>Hook which is called before each render.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 549,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "willRender",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component#willUpdateState",
    "description": "<p>Hook which is called before the state is changed.\nUse this to dispose objects which will be replaced during a state change.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 479,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "willUpdateState",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Component.isMounted",
    "description": "<p>Checks whether a given element has been injected in the document already</p>\n<p>We traverse up the DOM until we find the document root element. We return true\nif we can find it.</p>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 1526,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "isMounted",
    "params": [],
    "isStatic": true
  },
  {
    "type": "method",
    "id": "ui/Component.mount",
    "description": "<p>Mount a component onto a given DOM or jquery element.</p>\n<p>Mounting a component means, that the component gets rendered\nand then appended to the given element.\nIf the element is in the DOM, all components receive a 'didMount' event.</p>\n",
    "example": "<p>Mounting a component via Component class and providing props.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">Component</span><span class=\"hljs-class\">.mount</span>(MyComponent, { <span class=\"hljs-attribute\">foo</span>: <span class=\"hljs-string\">\"foo\"</span> }, $(<span class=\"hljs-string\">'body'</span>));\n</code></pre>\n<p>Creating a component using <code>Component.render()</code> and mounting later:</p>\n<pre><code class=\"hljs\">var <span class=\"hljs-built_in\">comp</span> = Component.render(MyComponent);\n<span class=\"hljs-built_in\">comp</span>.addClass(<span class=\"hljs-string\">'foo'</span>);\nComponent.mount(<span class=\"hljs-built_in\">comp</span>, $(<span class=\"hljs-string\">'body'</span>));\n</code></pre>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 1483,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "mount",
    "params": [
      {
        "type": "Class",
        "shortType": "Class",
        "name": "component",
        "description": "<p>Component Class to be mounted</p>\n"
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "[props]",
        "description": "<p>props for the component</p>\n",
        "optional": true
      },
      {
        "type": "",
        "shortType": "",
        "name": "el",
        "description": "<p>a DOM or jQuery element</p>\n"
      }
    ],
    "returns": {
      "type": "Component",
      "description": "<p>the mounted component</p>\n"
    },
    "isStatic": true
  },
  {
    "type": "method",
    "id": "ui/Component.render",
    "example": "<p>Creating an instace of a Component:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">var</span> comp = Component.<span class=\"hljs-function\"><span class=\"hljs-title\">render</span><span class=\"hljs-params\">(MyComponent)</span></span>\n</code></pre>\n<p>Creating an anonymous Component class via a render function.\nThis is used mostly internally, e.g., in the test suite.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> comp = Component.render(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">return</span> $$(<span class=\"hljs-string\">'div'</span>).append(<span class=\"hljs-string\">'foo'</span>)\n})\n</code></pre>\n",
    "sourceFile": "ui/Component.js",
    "sourceLine": 1431,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Component",
    "name": "render",
    "params": [
      {
        "type": "Class|Function",
        "shortType": "Class|Function",
        "name": "ComponentClass",
        "description": "<p>a Component class or a render function</p>\n"
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "[props]",
        "description": "",
        "optional": true
      }
    ],
    "returns": {
      "type": "Component",
      "description": ""
    },
    "isStatic": true
  },
  {
    "type": "class",
    "id": "ui/ContainerAnnotator",
    "description": "<p>Represents a flow annotator that manages a sequence of nodes in a container. Needs to\nbe instantiated within a ui/Controller context. Works like a <a href=\"#nodeId=ui/ContainerEditor\" data-type=\"cross-link\" data-node-id=\"ui/ContainerEditor\">ui/ContainerEditor</a>\nbut you can only annotate, not edit.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">$$(ContainerAnnotator, {\n  name: <span class=\"hljs-string\">'bodySurface'</span>,\n  containerId: <span class=\"hljs-string\">'main'</span>,\n  doc: doc,\n  commands: [ToggleStrong]\n})\n</code></pre>\n",
    "sourceFile": "ui/ContainerAnnotator.js",
    "sourceLine": 8,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "name",
          "description": "<p>unique editor name</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "containerId",
          "description": "<p>container id</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "ui/SurfaceCommand[]",
          "shortType": "SurfaceCommand[]",
          "name": "commands",
          "description": "<p>array of command classes to be available</p>\n"
        }
      }
    ],
    "parent": "ui",
    "name": "ContainerAnnotator",
    "members": [],
    "superClass": "ui/ContainerEditor"
  },
  {
    "type": "class",
    "id": "ui/ContainerEditor",
    "description": "<p>Represents a flow editor that manages a sequence of nodes in a container. Needs to be\ninstantiated inside a <a href=\"#nodeId=ui/Controller\" data-type=\"cross-link\" data-node-id=\"ui/Controller\">ui/Controller</a> context.</p>\n",
    "example": "<p>Create a full-fledged <code>ContainerEditor</code> for the <code>body</code> container of a document.\nAllow Strong and Emphasis annotations and to switch text types between paragraph\nand heading at level 1.</p>\n<pre><code class=\"hljs lang-js\">$$(ContainerEditor, {\n  name: <span class=\"hljs-string\">'bodyEditor'</span>,\n  containerId: <span class=\"hljs-string\">'body'</span>,\n  textTypes: [\n    {name: <span class=\"hljs-string\">'paragraph'</span>, data: {type: <span class=\"hljs-string\">'paragraph'</span>}},\n    {name: <span class=\"hljs-string\">'heading1'</span>,  data: {type: <span class=\"hljs-string\">'heading'</span>, level: <span class=\"hljs-number\">1</span>}}\n  ],\n  commands: [StrongCommand, EmphasisCommand, SwitchTextTypeCommand],\n})\n</code></pre>\n",
    "sourceFile": "ui/ContainerEditor.js",
    "sourceLine": 18,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "name",
          "description": "<p>unique editor name</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "containerId",
          "description": "<p>container id</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "Object[]",
          "shortType": "Object[]",
          "name": "textTypes",
          "description": "<p>array of textType definition objects</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "ui/SurfaceCommand[]",
          "shortType": "SurfaceCommand[]",
          "name": "commands",
          "description": "<p>array of command classes to be available</p>\n"
        }
      }
    ],
    "parent": "ui",
    "name": "ContainerEditor",
    "members": [
      "ui/ContainerEditor#break",
      "ui/ContainerEditor#copy",
      "ui/ContainerEditor#delete",
      "ui/ContainerEditor#getContainerId",
      "ui/ContainerEditor#insertNode",
      "ui/ContainerEditor#insertText",
      "ui/ContainerEditor#paste",
      "ui/ContainerEditor#selectAll",
      "ui/ContainerEditor#softBreak",
      "ui/ContainerEditor#switchType"
    ],
    "superClass": "ui/Surface"
  },
  {
    "type": "method",
    "id": "ui/ContainerEditor#break",
    "description": "<p>Performs a <a href=\"#nodeId=model/transform/breakNode\" data-type=\"cross-link\" data-node-id=\"model/transform/breakNode\">model/transform/breakNode</a> transformation</p>\n",
    "sourceFile": "ui/ContainerEditor.js",
    "sourceLine": 175,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ContainerEditor",
    "name": "break",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ContainerEditor#copy",
    "description": "<p>Copy the current selection. Performs a <a href=\"#nodeId=model/transform/copySelection\" data-type=\"cross-link\" data-node-id=\"model/transform/copySelection\">model/transform/copySelection</a>\ntransformation.</p>\n",
    "sourceFile": "ui/ContainerEditor.js",
    "sourceLine": 254,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ContainerEditor",
    "name": "copy",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ContainerEditor#delete",
    "description": "<p>Performs a <a href=\"#nodeId=model/transform/deleteSelection\" data-type=\"cross-link\" data-node-id=\"model/transform/deleteSelection\">model/transform/deleteSelection</a> transformation</p>\n",
    "sourceFile": "ui/ContainerEditor.js",
    "sourceLine": 167,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ContainerEditor",
    "name": "delete",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ContainerEditor#getContainerId",
    "description": "<p>Returns the containerId the editor is bound to</p>\n",
    "sourceFile": "ui/ContainerEditor.js",
    "sourceLine": 108,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ContainerEditor",
    "name": "getContainerId",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ContainerEditor#insertNode",
    "description": "<p>Performs an <a href=\"#nodeId=model/transform/insertNode\" data-type=\"cross-link\" data-node-id=\"model/transform/insertNode\">model/transform/insertNode</a> transformation</p>\n",
    "sourceFile": "ui/ContainerEditor.js",
    "sourceLine": 185,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ContainerEditor",
    "name": "insertNode",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ContainerEditor#insertText",
    "description": "<p>Performs an <a href=\"#nodeId=model/transform/insertText\" data-type=\"cross-link\" data-node-id=\"model/transform/insertText\">model/transform/insertText</a> transformation</p>\n",
    "sourceFile": "ui/ContainerEditor.js",
    "sourceLine": 236,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ContainerEditor",
    "name": "insertText",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ContainerEditor#paste",
    "description": "<p>Performs a <a href=\"#nodeId=model/transform/paste\" data-type=\"cross-link\" data-node-id=\"model/transform/paste\">model/transform/paste</a> transformation</p>\n",
    "sourceFile": "ui/ContainerEditor.js",
    "sourceLine": 226,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ContainerEditor",
    "name": "paste",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ContainerEditor#selectAll",
    "description": "<p>Selects all content in the container</p>\n",
    "sourceFile": "ui/ContainerEditor.js",
    "sourceLine": 205,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ContainerEditor",
    "name": "selectAll",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ContainerEditor#softBreak",
    "description": "<p>Inserts a soft break</p>\n",
    "sourceFile": "ui/ContainerEditor.js",
    "sourceLine": 245,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ContainerEditor",
    "name": "softBreak",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ContainerEditor#switchType",
    "description": "<p>Performs a <a href=\"#nodeId=model/transform/switchTextType\" data-type=\"cross-link\" data-node-id=\"model/transform/switchTextType\">model/transform/switchTextType</a> transformation</p>\n",
    "sourceFile": "ui/ContainerEditor.js",
    "sourceLine": 195,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ContainerEditor",
    "name": "switchType",
    "params": []
  },
  {
    "type": "class",
    "id": "ui/Controller",
    "description": "<p>Controls Substance infrastructure. Needs to be supplied as a top level instance\nto serve editors, commands and tools as a context.</p>\n<p>In order to construct a controller, you need to have a document instance ready,\nas well as a set of components and commands that you want your app to support.\nA controller can manage one or more editing surfaces.</p>\n<p>The controller is the interface for your app to trigger editor actions. For\ninstance from any component, not only from a predefined toolbar commands\ncan be executed on the controller to update the document.</p>\n",
    "example": "<p>We utilize a custom <a href=\"#nodeId=ui/Toolbar\" data-type=\"cross-link\" data-node-id=\"ui/Toolbar\">ui/Toolbar</a> and a configured <a href=\"#nodeId=ui/ContainerEditor\" data-type=\"cross-link\" data-node-id=\"ui/ContainerEditor\">ui/ContainerEditor</a>.\nCheck out the <a href=\"https://github.com/substance/examples\" target=\"_blank\">examples</a> for complete usage.</p>\n<p>as a <code>Toolbar</code> including tools like the <code>UndoTool</code> and a configured <code>ContainerEditor</code>, which will do the actual editing work.</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> ProseEditor = Controller.extend({\n  <span class=\"hljs-comment\">// Editor configuration</span>\n  static: {\n    config: CONFIG,\n  },\n  <span class=\"hljs-comment\">// Custom Render method for your editor</span>\n  render: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> config = getConfig();\n    <span class=\"hljs-keyword\">return</span> $$(<span class=\"hljs-string\">'div'</span>).addClass(<span class=\"hljs-string\">'sc-prose-editor'</span>).append(\n      $$(Toolbar).append(\n        $$(Toolbar.Group).append(\n          $$(TextTool, {<span class=\"hljs-string\">'title'</span>: <span class=\"hljs-keyword\">this</span>.i18n.t(<span class=\"hljs-string\">'switch_text'</span>)}),\n          $$(EmphasisTool).append($$(Icon, {icon: <span class=\"hljs-string\">\"fa-italic\"</span>}))\n        )\n      ),\n      $$(ContainerEditor, {\n        doc: <span class=\"hljs-keyword\">this</span>.props.doc,\n        containerId: <span class=\"hljs-string\">'body'</span>,\n        name: <span class=\"hljs-string\">'bodyEditor'</span>,\n        commands: config.bodyEditor.commands\n      }).ref(<span class=\"hljs-string\">'bodyEditor'</span>)\n    );\n  }\n});\n</code></pre>\n<p>There's also a config object that is essential for the editor to work. The following\nconfiguration sets up a component registry that assigns a visual component to each\ncontent node type and defines which commands should be supported on the contorller\nlevel.</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> CONFIG = {\n  controller: {\n    <span class=\"hljs-comment\">// Component registry</span>\n    components: {\n      <span class=\"hljs-string\">'paragraph'</span>: <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/packages/paragraph/ParagraphComponent'</span>),\n      ...\n    },\n    <span class=\"hljs-comment\">// Controller commands</span>\n    commands: [\n      <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/ui/commands/undo'</span>),\n      <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/ui/commands/redo'</span>),\n      <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/ui/commands/save'</span>)\n    ]\n  },\n  <span class=\"hljs-comment\">// Add custom configuration to this object</span>\n};\n</code></pre>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 90,
    "tags": [
      {
        "type": "component",
        "value": ""
      }
    ],
    "parent": "ui",
    "name": "Controller",
    "members": [
      "ui/Controller#didFocus",
      "ui/Controller#dispose",
      "ui/Controller#executeCommand",
      "ui/Controller#getChildContext",
      "ui/Controller#getCommand",
      "ui/Controller#getContainerId",
      "ui/Controller#getDocument",
      "ui/Controller#getFocusedSurface",
      "ui/Controller#getSelection",
      "ui/Controller#getSurface",
      "ui/Controller#getToolManager",
      "ui/Controller#hasSurfaces",
      "ui/Controller#popState",
      "ui/Controller#pushState",
      "ui/Controller#registerSurface",
      "ui/Controller#render",
      "ui/Controller#saveDocument",
      "ui/Controller#toolManager",
      "ui/Controller#unregisterSurface",
      "ui/Controller@command:executed",
      "ui/Controller@document:saved",
      "ui/Controller@selection:changed"
    ],
    "isAbstract": true
  },
  {
    "type": "method",
    "id": "ui/Controller#didFocus",
    "description": "<p>Called whenever a surface has been focused.</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 371,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "didFocus",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Controller#dispose",
    "description": "<p>Dispose component when component life ends. If you need to implement dispose\nin your custom Controller class, don't forget the super call.</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 140,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "dispose",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Controller#executeCommand",
    "description": "<p>Execute command with given name if registered. In most cases this triggers a document transformation and\ncorresponding UI updates. For instance when pressing <code>ctrl+b</code> the\n<code>toggleStrong</code> command is executed. Each implemented command returns a custom\ninfo object, describing the action that has been performed.\nAfter execution a <code>command:executed</code> event is emitted on the controller.</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 244,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "executeCommand",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "commandName",
        "description": "<p>the command name</p>\n"
      }
    ],
    "returns": {
      "type": "ui/ControllerCommand",
      "description": "<p>A controller command</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Controller#getChildContext",
    "description": "<p>Defines the child context. You should override this to provide your own contexts.</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 149,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "getChildContext",
    "params": [],
    "returns": {
      "type": "object",
      "description": "<p>the child context</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Controller#getCommand",
    "description": "<p>Get registered controller command by name</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 230,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "getCommand",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "commandName",
        "description": "<p>the command name</p>\n"
      }
    ],
    "returns": {
      "type": "ui/ControllerCommand",
      "description": "<p>A controller command</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Controller#getContainerId",
    "description": "<p>Get containerId for currently focused surface</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 328,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "getContainerId",
    "params": [],
    "returns": {
      "type": "String",
      "description": "<p>container id for currently focused surface, or undefined</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Controller#getDocument",
    "description": "<p>Get document instance</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 270,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "getDocument",
    "params": [],
    "returns": {
      "type": "model/Document",
      "description": "<p>The document instance owned by the controller</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Controller#getFocusedSurface",
    "description": "<p>Get the currently focused Surface.</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 299,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "getFocusedSurface",
    "params": [],
    "returns": {
      "type": "ui/Surface",
      "description": "<p>Surface instance</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Controller#getSelection",
    "description": "<p>Get selection of currently focused surface. We recomment to use getSelection on Surface\ninstances directly when possible.</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 314,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "getSelection",
    "params": [],
    "returns": {
      "type": "model/Selection",
      "description": "<p>the current selection derived from the surface.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Controller#getSurface",
    "description": "<p>Get Surface instance</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 285,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "getSurface",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "name",
        "description": "<p>Name under which the surface is registered</p>\n"
      }
    ],
    "returns": {
      "type": "ui/Surface",
      "description": "<p>The surface instance</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Controller#getToolManager",
    "description": "<p>Get the associated ToolManager instance</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 202,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "getToolManager",
    "params": [],
    "returns": {
      "type": "ui/ToolManager",
      "description": "<p>the ToolManager instance</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Controller#hasSurfaces",
    "description": "<p>Check if there are any surfaces registered</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 364,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "hasSurfaces",
    "params": [],
    "returns": {
      "type": "true|false",
      "description": "<p>true if surface count &gt; 0</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Controller#popState",
    "description": "<p>Pop surface state</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 496,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "popState",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Controller#pushState",
    "description": "<p>Push surface state</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 481,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "pushState",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Controller#registerSurface",
    "description": "<p>Register a surface</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 340,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "registerSurface",
    "params": [
      {
        "type": "",
        "shortType": "",
        "name": "surface",
        "description": "<p>{ui/Surface} A new surface instance to register</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "ui/Controller#render",
    "description": "<p>Render method of the controller component. This needs to be implemented by the\ncustom Controller class.</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 190,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "render",
    "params": [],
    "returns": {
      "type": "ui/Component.VirtualNode",
      "description": "<p>VirtualNode created using Component.$$</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Controller#saveDocument",
    "description": "<p>Start document save workflow</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 507,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "saveDocument",
    "params": []
  },
  {
    "type": "property",
    "id": "ui/Controller#toolManager",
    "description": "<p>Manages tools.</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 118,
    "tags": [],
    "parent": "ui/Controller",
    "name": "toolManager"
  },
  {
    "type": "method",
    "id": "ui/Controller#unregisterSurface",
    "description": "<p>Unregister a surface</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 351,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Controller",
    "name": "unregisterSurface",
    "params": [
      {
        "type": "",
        "shortType": "",
        "name": "surface",
        "description": "<p>{ui/Surface} A surface instance to unregister</p>\n"
      }
    ]
  },
  {
    "type": "event",
    "id": "ui/Controller@command:executed",
    "description": "<p>Emitted after a command has been executed. Since we did not allow command\nimplementations to access UI components, UI components can listen to\nthe <code>command:executed</code> event and perform necessary action then.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">LinkTool.Prototype = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.didInitialize = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> ctrl = <span class=\"hljs-keyword\">this</span>.getController();\n\n    ctrl.on(<span class=\"hljs-string\">'command:executed'</span>, <span class=\"hljs-keyword\">this</span>.onCommandExecuted, <span class=\"hljs-keyword\">this</span>);\n  };\n\n  <span class=\"hljs-keyword\">this</span>.onCommandExecuted = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">info, commandName</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (commandName === <span class=\"hljs-keyword\">this</span>.static.command) {\n      <span class=\"hljs-comment\">// Toggle the edit prompt when either edit is</span>\n      <span class=\"hljs-comment\">// requested or a new link has been created</span>\n      <span class=\"hljs-keyword\">if</span> (_.includes([<span class=\"hljs-string\">'edit'</span>,<span class=\"hljs-string\">'create'</span>], info.mode)) {\n        <span class=\"hljs-keyword\">this</span>.togglePrompt();\n      }\n    }\n  };\n  ...\n};\n</code></pre>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 536,
    "tags": [],
    "parent": "ui/Controller",
    "name": "command:executed",
    "params": [
      {
        "type": "object",
        "shortType": "object",
        "name": "info",
        "description": "<p>information about the command execution</p>\n"
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "commandName",
        "description": "<p>the command name (e.g. 'strong', 'emphasis')</p>\n"
      },
      {
        "type": "ui/Command",
        "shortType": "Command",
        "name": "cmd",
        "description": "<p>the command instance</p>\n"
      }
    ]
  },
  {
    "type": "event",
    "id": "ui/Controller@document:saved",
    "description": "<p>Emitted when a save workflow has been completed successfully.</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 579,
    "tags": [],
    "parent": "ui/Controller",
    "name": "document:saved",
    "params": []
  },
  {
    "type": "event",
    "id": "ui/Controller@selection:changed",
    "description": "<p>Emitted when the active selection has changed, e.g. through cursor movement.\nTransports <code>sel</code> a DocumentSelection that can be expected but also the\nsurface in which the selection change happened.</p>\n",
    "sourceFile": "ui/Controller.js",
    "sourceLine": 570,
    "tags": [],
    "parent": "ui/Controller",
    "name": "selection:changed",
    "params": [
      {
        "type": "ui/Command",
        "shortType": "Command",
        "name": "cmd",
        "description": "<p>the command instance</p>\n"
      }
    ]
  },
  {
    "type": "class",
    "id": "ui/ControllerCommand",
    "description": "<p>A class for commands intended to be executed on the <a href=\"#nodeId=ui/Controller\" data-type=\"cross-link\" data-node-id=\"ui/Controller\">ui/Controller</a>\nlevel. See the example below to learn how to define a custom <code>ControllerCommand</code>.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> ControllerCommand = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/ui/ControllerCommand'</span>);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SaveCommand</span>(<span class=\"hljs-params\"></span>) </span>{\n  ControllerCommand.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n}\nSaveCommand.Prototype = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.execute = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.getController().saveDocument();\n  }\n};\nControllerCommand.extend(SaveCommand);\nSaveCommand.static.name = <span class=\"hljs-string\">'save'</span>;\n</code></pre>\n",
    "sourceFile": "ui/ControllerCommand.js",
    "sourceLine": 29,
    "tags": [],
    "parent": "ui",
    "name": "ControllerCommand",
    "members": [
      "ui/ControllerCommand#execute",
      "ui/ControllerCommand#getController",
      "ui/ControllerCommand#getDocument"
    ],
    "isAbstract": true,
    "superClass": "ui/Command"
  },
  {
    "type": "method",
    "id": "ui/ControllerCommand#execute",
    "description": "<p>Execute command</p>\n",
    "sourceFile": "ui/ControllerCommand.js",
    "sourceLine": 63,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ControllerCommand",
    "name": "execute",
    "params": [],
    "returns": {
      "type": "object",
      "description": "<p>info object with execution details</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/ControllerCommand#getController",
    "description": "<p>Get controller instance</p>\n",
    "sourceFile": "ui/ControllerCommand.js",
    "sourceLine": 41,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ControllerCommand",
    "name": "getController",
    "params": [],
    "returns": {
      "type": "ui/Controller",
      "description": "<p>controller instance</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/ControllerCommand#getDocument",
    "description": "<p>Get document instance</p>\n",
    "sourceFile": "ui/ControllerCommand.js",
    "sourceLine": 50,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ControllerCommand",
    "name": "getDocument",
    "params": [],
    "returns": {
      "type": "data/Document",
      "description": "<p>document instance owned by the controller</p>\n"
    }
  },
  {
    "type": "class",
    "id": "ui/ControllerTool",
    "description": "<p>Abstract class for tools tools that interact with a document. E.g. UndoTool or\nRedoTool. Needs to be instantiated inside a <a href=\"#nodeId=ui/Controller\" data-type=\"cross-link\" data-node-id=\"ui/Controller\">ui/Controller</a> context.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> ControllerTool = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/ui/ControllerTool'</span>);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SaveTool</span>(<span class=\"hljs-params\"></span>) </span>{\n  SaveTool.super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n}\nControllerTool.extend(SaveTool);\nSaveTool.static.name = <span class=\"hljs-string\">'save'</span>;\nSaveTool.static.command = <span class=\"hljs-string\">'save'</span>;\n</code></pre>\n",
    "sourceFile": "ui/ControllerTool.js",
    "sourceLine": 25,
    "tags": [],
    "parent": "ui",
    "name": "ControllerTool",
    "members": [
      "ui/ControllerTool#performAction"
    ],
    "superClass": "ui/Tool"
  },
  {
    "type": "method",
    "id": "ui/ControllerTool#performAction",
    "description": "<p>Executes the associated command</p>\n",
    "sourceFile": "ui/ControllerTool.js",
    "sourceLine": 44,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ControllerTool",
    "name": "performAction",
    "params": []
  },
  {
    "type": "class",
    "id": "ui/DOMElement",
    "description": "<p>A unified interface for DOM elements used by Substance.</p>\n<p>There are three different implementations of this interface:</p>\n<ul>\n<li><a href=\"#nodeId=ui/DefaultDOMElement\" data-type=\"cross-link\" data-node-id=\"ui/DefaultDOMElement\">ui/DefaultDOMElement</a></li>\n<li><a href=\"#nodeId=ui/VirtualDOMElement\" data-type=\"cross-link\" data-node-id=\"ui/VirtualDOMElement\">ui/VirtualDOMElement</a></li>\n<li><a href=\"#nodeId=ui/Component\" data-type=\"cross-link\" data-node-id=\"ui/Component\">ui/Component</a></li>\n</ul>\n<p>Methods which rely on a CSS selector implementation are only available for <a href=\"#nodeId=ui/DefaultDOMElement\" data-type=\"cross-link\" data-node-id=\"ui/DefaultDOMElement\">ui/DefaultDOMElement</a> instance, which is used during DOM import.\nI.e., don't use the following methods in Component renderers:</p>\n<ul>\n<li><a href=\"#nodeId=ui/DOMElement#is\" data-type=\"cross-link\" data-node-id=\"ui/DOMElement#is\">ui/DOMElement#is</a></li>\n<li><a href=\"#nodeId=ui/DOMElement#find\" data-type=\"cross-link\" data-node-id=\"ui/DOMElement#find\">ui/DOMElement#find</a></li>\n<li><a href=\"#nodeId=ui/DOMElement#findAll\" data-type=\"cross-link\" data-node-id=\"ui/DOMElement#findAll\">ui/DOMElement#findAll</a></li>\n</ul>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 27,
    "tags": [
      {
        "type": "interface",
        "value": ""
      }
    ],
    "parent": "ui",
    "name": "DOMElement",
    "members": [
      "ui/DOMElement#addClass",
      "ui/DOMElement#append",
      "ui/DOMElement#attr",
      "ui/DOMElement#clone",
      "ui/DOMElement#createElement",
      "ui/DOMElement#css",
      "ui/DOMElement#empty",
      "ui/DOMElement#find",
      "ui/DOMElement#findAll",
      "ui/DOMElement#focus",
      "ui/DOMElement#getAttribute",
      "ui/DOMElement#getChildNodes",
      "ui/DOMElement#getChildren",
      "ui/DOMElement#getId",
      "ui/DOMElement#getInnerHtml",
      "ui/DOMElement#getNodeType",
      "ui/DOMElement#getOuterHtml",
      "ui/DOMElement#getParent",
      "ui/DOMElement#getRoot",
      "ui/DOMElement#getTagName",
      "ui/DOMElement#getTextContent",
      "ui/DOMElement#hasClass",
      "ui/DOMElement#html",
      "ui/DOMElement#insertAt",
      "ui/DOMElement#is",
      "ui/DOMElement#isCommentNode",
      "ui/DOMElement#isDocumentNode",
      "ui/DOMElement#isElementNode",
      "ui/DOMElement#isTextNode",
      "ui/DOMElement#off",
      "ui/DOMElement#on",
      "ui/DOMElement#remove",
      "ui/DOMElement#removeAt",
      "ui/DOMElement#removeAttr",
      "ui/DOMElement#removeClass",
      "ui/DOMElement#setAttribute",
      "ui/DOMElement#setId",
      "ui/DOMElement#setInnerHtml",
      "ui/DOMElement#setTagName",
      "ui/DOMElement#setTextContent",
      "ui/DOMElement#text",
      "ui/DOMElement#val",
      "ui/DOMElement.parseHTML"
    ],
    "isAbstract": true
  },
  {
    "type": "method",
    "id": "ui/DOMElement#addClass",
    "description": "<p>Adds a CSS class.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 54,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "addClass",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "classString",
        "description": "<p>A space-separated string with CSS classes</p>\n"
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#append",
    "description": "<p>Append a child element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 556,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "append",
    "params": [
      {
        "type": "ui/DOMElement|String",
        "shortType": "DOMElement|String",
        "name": "child",
        "description": "<p>An element or text to append</p>\n"
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#attr",
    "description": "<p>jQuery style getter and setter for attributes.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 77,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "attr",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "name",
        "description": ""
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "[value]",
        "description": "<p>if present the attribute will be set</p>\n",
        "optional": true
      }
    ],
    "returns": {
      "type": "String|this",
      "description": "<p>if used as getter the attribute value, otherwise this element for chaining</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#clone",
    "description": "<p>Creates a clone of the current element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 467,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "clone",
    "params": [],
    "returns": {
      "type": "ui/DOMElement",
      "description": "<p>A clone of this element.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#createElement",
    "description": "<p>Creates a DOMElement of the same type.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 477,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "createElement",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "str",
        "description": "<p>a tag name or an HTML element as string.</p>\n"
      }
    ],
    "returns": {
      "type": "ui/DOMElement",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#css",
    "description": "<p>jQuery style method to set or get inline CSS styles.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 297,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "css",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "name",
        "description": "<p>the style name</p>\n"
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "[value]",
        "description": "<p>the style value</p>\n",
        "optional": true
      }
    ],
    "returns": {
      "type": "String|this",
      "description": "<p>the style value or this if used as a setter</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#empty",
    "description": "<p>Removes all child nodes from this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 589,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "empty",
    "params": [],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#find",
    "description": "<p>Find the first descendant element matching the given CSS selector.\nNote this differs from jQuery.find() that it returns only one element.</p>\n<p><em>Attention</em>*\nThis method is currently not implemented for {ui/VirtualElement}.\nThis means you can use it only in importer implementations, but not in render or exporter implementations.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 530,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "find",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "cssSelector",
        "description": ""
      }
    ],
    "returns": {
      "type": "ui/DOMElement",
      "description": "<p>found element</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#findAll",
    "description": "<p>Find all descendant elements matching the given CSS selector.</p>\n<p><em>Attention</em>*\nThis method is currently not implemented for {ui/VirtualElement}.\nThis means you can use it only in importer implementations, but not in render or exporter implementations.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 545,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "findAll",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "cssSelector",
        "description": ""
      }
    ],
    "returns": {
      "type": "Array.<ui/DOMElement>",
      "description": "<p>found elements</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#focus",
    "description": "<p>Focusses this element.</p>\n<p><em>Attention: this makes only sense for elements which are rendered in the browser</em>*</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 375,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "focus",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/DOMElement#getAttribute",
    "description": "<p>Get the attribute with a given name.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 109,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "getAttribute",
    "params": [],
    "returns": {
      "type": "String",
      "description": "<p>the attribute's value.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#getChildNodes",
    "description": "<p>Get child nodes of this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 406,
    "isPrivate": true,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "getChildNodes",
    "params": [],
    "returns": {
      "type": "Array.<ui/DOMElement>",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#getChildren",
    "description": "<p>Get child elements of this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 417,
    "isPrivate": true,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "getChildren",
    "params": [],
    "returns": {
      "type": "Array.<ui/DOMElement>",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#getId",
    "description": "<p>Get the id of this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 157,
    "isPrivate": true,
    "tags": [
      {
        "type": "note",
        "value": "Considered as private API, in favor of the property {ui/DOMElement.prototype.id}"
      }
    ],
    "parent": "ui/DOMElement",
    "name": "getId",
    "params": [],
    "returns": {
      "type": "String",
      "description": "<p>the id.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#getInnerHtml",
    "description": "<p>Get the innerHTML of this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 237,
    "isPrivate": true,
    "tags": [
      {
        "type": "note",
        "value": "Considered as private API, in favor of the property {@link ui/DOMElement.prototype.innerHTML}"
      }
    ],
    "parent": "ui/DOMElement",
    "name": "getInnerHtml",
    "params": [],
    "returns": {
      "type": "String",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#getNodeType",
    "description": "<p>Gets the type of this element in lower-case.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 385,
    "isPrivate": true,
    "tags": [
      {
        "type": "note",
        "value": "Considered as private API, in favor of the property {@link ui/DOMElement.prototype.nodeType}"
      }
    ],
    "parent": "ui/DOMElement",
    "name": "getNodeType",
    "params": [],
    "returns": {
      "type": "String",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#getOuterHtml",
    "description": "<p>Get the outerHTML of this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 262,
    "isPrivate": true,
    "tags": [
      {
        "type": "note",
        "value": "Considered as private API, in favor of the property {@link ui/DOMElement.prototype.outerHTML}"
      }
    ],
    "parent": "ui/DOMElement",
    "name": "getOuterHtml",
    "params": [],
    "returns": {
      "type": "String",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#getParent",
    "description": "<p>Get the parent element of this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 502,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "getParent",
    "params": [],
    "returns": {
      "type": "ui/DOMElement",
      "description": "<p>the parent element</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#getRoot",
    "description": "<p>Get the root ancestor element of this element.</p>\n<p>In the browser this is the <code>window.document</code>.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 514,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "getRoot",
    "params": [],
    "returns": {
      "type": "ui/DOMElement",
      "description": "<p>the root element</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#getTagName",
    "description": "<p>Get the tagName of this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 132,
    "isPrivate": true,
    "tags": [
      {
        "type": "note",
        "value": "Considered as private API, in favor of the property {ui/DOMElement.prototype.tagName}"
      }
    ],
    "parent": "ui/DOMElement",
    "name": "getTagName",
    "params": [],
    "returns": {
      "type": "String",
      "description": "<p>the tag name in lower-case.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#getTextContent",
    "description": "<p>Get the textContent of this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 197,
    "isPrivate": true,
    "tags": [
      {
        "type": "note",
        "value": "Considered as private API, in favor of the property {ui/DOMElement.prototype.innerHTML}"
      }
    ],
    "parent": "ui/DOMElement",
    "name": "getTextContent",
    "params": [],
    "returns": {
      "type": "String",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#hasClass",
    "description": "<p>Checks if a CSS class is set.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 43,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "hasClass",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "className",
        "description": ""
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if the CSS class is set</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#html",
    "description": "<p>jQuery style getter and setter for the innerHTML of an element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 221,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "html",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "[html]",
        "description": "<p>The html to set.</p>\n",
        "optional": true
      }
    ],
    "returns": {
      "type": "String|this",
      "description": "<p>the inner html if used as a getter, <code>this</code> otherwise</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#insertAt",
    "description": "<p>Insert a child element at a given position.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 568,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "insertAt",
    "params": [
      {
        "type": "Number",
        "shortType": "Number",
        "name": "pos",
        "description": "<p>insert position</p>\n"
      },
      {
        "type": "ui/DOMElement|String",
        "shortType": "DOMElement|String",
        "name": "child",
        "description": "<p>The child element or text to insert.</p>\n"
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#is",
    "description": "<p>Checks if a given CSS selector matches for this element.</p>\n<p><em>Attention</em>*\nThis method is currently not implemented for {ui/VirtualElement}.\nThis means you should use it only in importer implementations.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 492,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "is",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "cssSelector",
        "description": ""
      }
    ],
    "returns": {
      "type": "Boolean",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#isCommentNode",
    "description": "<p>Checks if the element is a CommentNode.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 447,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "isCommentNode",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if the element is of type <code>Node.COMMENT_NODE</code></p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#isDocumentNode",
    "description": "<p>Checks if the element is a DocumentNode.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 457,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "isDocumentNode",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if the element is of type <code>Node.DOCUMENT_NODE</code></p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#isElementNode",
    "description": "<p>Checks if the element is actually an element as opposed to a node.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 437,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "isElementNode",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if the element is of type <code>Node.ELEMENT_NODE</code></p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#isTextNode",
    "description": "<p>Checks if the element is a TextNode.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 427,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "isTextNode",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if the element is of type <code>Node.TEXT_NODE</code></p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#off",
    "description": "<p>Unregisters the handler of a given event.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 356,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "off",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "event",
        "description": "<p>The event name.</p>\n"
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#on",
    "description": "<p>Registers an Element event handler.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 332,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "on",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "event",
        "description": "<p>The event name.</p>\n"
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "[selector]",
        "description": "<p>A css selector which is used to filter events by evaluating <code>event.target.is(selector)</code>.</p>\n",
        "optional": true
      },
      {
        "type": "Function",
        "shortType": "Function",
        "name": "handler",
        "description": "<p>The handler function.</p>\n"
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#remove",
    "description": "<p>Removes this element from its parent.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 599,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "remove",
    "params": [],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#removeAt",
    "description": "<p>Remove the child at a given position.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 579,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "removeAt",
    "params": [
      {
        "type": "Number",
        "shortType": "Number",
        "name": "pos",
        "description": ""
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#removeAttr",
    "description": "<p>Removes a CSS attribute.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 99,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "removeAttr",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "name",
        "description": ""
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#removeClass",
    "description": "<p>Removes a CSS class.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 65,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "removeClass",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "classString",
        "description": "<p>A space-separated string with CSS classes</p>\n"
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#setAttribute",
    "description": "<p>Set the attribute with a given name.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 120,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "setAttribute",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "the",
        "description": "<p>attribute's value.</p>\n"
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#setId",
    "description": "<p>Set the id of this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 170,
    "isPrivate": true,
    "tags": [
      {
        "type": "note",
        "value": "Considered as private API, in favor of the property {ui/DOMElement.prototype.id}"
      }
    ],
    "parent": "ui/DOMElement",
    "name": "setId",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "id",
        "description": "<p>the new id</p>\n"
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#setInnerHtml",
    "description": "<p>Set the innerHTML of this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 250,
    "isPrivate": true,
    "tags": [
      {
        "type": "note",
        "value": "Considered as private API, in favor of the property {@link ui/DOMElement.prototype.innerHTML}"
      }
    ],
    "parent": "ui/DOMElement",
    "name": "setInnerHtml",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "text",
        "description": "<p>the new text content</p>\n"
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#setTagName",
    "description": "<p>Set the tagName of this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 145,
    "isPrivate": true,
    "tags": [
      {
        "type": "note",
        "value": "Considered as private API, in favor of the property {ui/DOMElement.prototype.tagName}"
      }
    ],
    "parent": "ui/DOMElement",
    "name": "setTagName",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "tagName",
        "description": "<p>the new tag name</p>\n"
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#setTextContent",
    "description": "<p>Set the textContent of this element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 210,
    "isPrivate": true,
    "tags": [
      {
        "type": "note",
        "value": "Considered as private API, in favor of the property {ui/DOMElement.prototype.innerHTML}"
      }
    ],
    "parent": "ui/DOMElement",
    "name": "setTextContent",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "text",
        "description": "<p>the new text content</p>\n"
      }
    ],
    "returns": {
      "type": "this",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#text",
    "description": "<p>Gets or sets the text content of an element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 181,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "text",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "[text]",
        "description": "<p>The text content to set.</p>\n",
        "optional": true
      }
    ],
    "returns": {
      "type": "String|this",
      "description": "<p>The text content if used as a getter, <code>this</code> otherwise</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement#val",
    "description": "<p>jQuery style getter and setter for the <em>value</em> of an element.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 273,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "val",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "[value]",
        "description": "<p>The value to set.</p>\n",
        "optional": true
      }
    ],
    "returns": {
      "type": "String|this",
      "description": "<p>the value if used as a getter, <code>this</code> otherwise</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DOMElement.parseHTML",
    "description": "<p>Parses a given HTML string.</p>\n",
    "sourceFile": "ui/DOMElement.js",
    "sourceLine": 692,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DOMElement",
    "name": "parseHTML",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "html",
        "description": "<p>HTML string</p>\n"
      }
    ],
    "returns": {
      "type": "Array.<ui/DefaultDOMElement>",
      "description": "<p>parsed elements</p>\n"
    },
    "isStatic": true
  },
  {
    "type": "class",
    "id": "ui/DefaultDOMElement",
    "description": "<p>Implements <a href=\"#nodeId=DOMElement\" data-type=\"cross-link\" data-node-id=\"DOMElement\">DOMElement</a> interface. For the browser we use native DOM\nmanipulation where possible and jQuery where useful. On the server Cheerio\nis used to represent the DOM.</p>\n",
    "sourceFile": "ui/DefaultDOMElement.js",
    "sourceLine": 21,
    "tags": [],
    "parent": "ui",
    "name": "DefaultDOMElement",
    "members": [
      "ui/DefaultDOMElement#withTagName",
      "ui/DefaultDOMElement.NodeIterator"
    ]
  },
  {
    "type": "method",
    "id": "ui/DefaultDOMElement#withTagName",
    "description": "<p>A convenience method to create an element with a different\ntagName but same content.</p>\n",
    "sourceFile": "ui/DefaultDOMElement.js",
    "sourceLine": 151,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DefaultDOMElement",
    "name": "withTagName",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "tagName",
        "description": ""
      }
    ],
    "returns": {
      "type": "DOMElement",
      "description": "<p>a new element</p>\n"
    }
  },
  {
    "type": "class",
    "id": "ui/DefaultDOMElement.NodeIterator",
    "description": "<p>A class that provides a browser/server compatible way to iterate\nover all children of an HTML element.</p>\n",
    "sourceFile": "ui/DefaultDOMElement.js",
    "sourceLine": 519,
    "isPrivate": true,
    "tags": [
      {
        "type": "param",
        "value": {
          "type": "util/DefaultDOMElement",
          "shortType": "DefaultDOMElement",
          "name": "el",
          "description": ""
        }
      }
    ],
    "parent": "ui/DefaultDOMElement",
    "name": "NodeIterator",
    "members": [
      "ui/DefaultDOMElement.NodeIterator#back",
      "ui/DefaultDOMElement.NodeIterator#hasNext",
      "ui/DefaultDOMElement.NodeIterator#next"
    ],
    "isStatic": true
  },
  {
    "type": "method",
    "id": "ui/DefaultDOMElement.NodeIterator#back",
    "description": "<p>Decrements the iterator.</p>\n",
    "sourceFile": "ui/DefaultDOMElement.js",
    "sourceLine": 551,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DefaultDOMElement.NodeIterator",
    "name": "back",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/DefaultDOMElement.NodeIterator#hasNext",
    "sourceFile": "ui/DefaultDOMElement.js",
    "sourceLine": 530,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DefaultDOMElement.NodeIterator",
    "name": "hasNext",
    "params": [],
    "returns": {
      "type": "Boolean",
      "description": "<p>true if there is another child node left.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/DefaultDOMElement.NodeIterator#next",
    "description": "<p>Increments the iterator providing the next child node.</p>\n",
    "sourceFile": "ui/DefaultDOMElement.js",
    "sourceLine": 539,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/DefaultDOMElement.NodeIterator",
    "name": "next",
    "params": [],
    "returns": {
      "type": "HTMLElement",
      "description": "<p>The next child node.</p>\n"
    }
  },
  {
    "type": "class",
    "id": "ui/Highlights",
    "description": "<p>Manages highlights. Used by <a href=\"#nodeId=ui/ScrollPane\" data-type=\"cross-link\" data-node-id=\"ui/ScrollPane\">ui/ScrollPane</a>.</p>\n",
    "example": "<pre><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> contentHighlights = <span class=\"hljs-keyword\">new</span> Highlights(doc);\n</code></pre>\n",
    "sourceFile": "ui/Highlights.js",
    "sourceLine": 21,
    "tags": [
      {
        "type": "param",
        "value": {
          "type": "model/Document",
          "shortType": "Document",
          "name": "doc",
          "description": "<p>document instance</p>\n"
        }
      }
    ],
    "parent": "ui",
    "name": "Highlights",
    "members": [
      "ui/Highlights#get",
      "ui/Highlights#set",
      "ui/Highlights@highlights:updated"
    ]
  },
  {
    "type": "method",
    "id": "ui/Highlights#get",
    "description": "<p>Get currently active highlights.</p>\n",
    "sourceFile": "ui/Highlights.js",
    "sourceLine": 35,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Highlights",
    "name": "get",
    "params": [],
    "returns": {
      "type": "Object",
      "description": "<p>Returns current highlights as a scoped object.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/Highlights#set",
    "description": "<p>Set highlights.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">  highlights.set({\n    <span class=\"hljs-string\">'figures'</span>: [<span class=\"hljs-string\">'figure-1'</span>, <span class=\"hljs-string\">'figure-3'</span>]\n    <span class=\"hljs-string\">'citations'</span>: [<span class=\"hljs-string\">'citation-1'</span>, <span class=\"hljs-string\">'citation-5'</span>]\n  });\n</code></pre>\n",
    "sourceFile": "ui/Highlights.js",
    "sourceLine": 53,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Highlights",
    "name": "set",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "scoped",
        "description": "<p>object describing highlights</p>\n"
      }
    ]
  },
  {
    "type": "event",
    "id": "ui/Highlights@highlights:updated",
    "description": "<p>Emitted when highlights have been updated</p>\n",
    "sourceFile": "ui/Highlights.js",
    "sourceLine": 86,
    "tags": [],
    "parent": "ui/Highlights",
    "name": "highlights:updated",
    "params": []
  },
  {
    "type": "class",
    "id": "ui/ScrollPane",
    "description": "<p>Wraps content in a scroll pane.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">$$(ScrollPane, {\n  scrollbarType: <span class=\"hljs-string\">'substance'</span>, <span class=\"hljs-comment\">// defaults to native</span>\n  scrollbarPosition: <span class=\"hljs-string\">'left'</span>, <span class=\"hljs-comment\">// defaults to right</span>\n  onScroll: <span class=\"hljs-keyword\">this</span>.onScroll.bind(<span class=\"hljs-keyword\">this</span>),\n  highlights: <span class=\"hljs-keyword\">this</span>.contentHighlights,\n  toc: <span class=\"hljs-keyword\">this</span>.toc\n})\n</code></pre>\n",
    "sourceFile": "ui/ScrollPane.js",
    "sourceLine": 9,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "scrollbarType",
          "description": "<p>'native' or 'substance' for a more advanced visual scrollbar. Defaults to 'native'</p>\n"
        }
      },
      {
        "type": "prop",
        "value": "{String} [scrollbarPosition] 'left' or 'right' only relevant when scrollBarType: 'substance'. Defaults to 'right'"
      },
      {
        "type": "prop",
        "value": "{ui/Highlights} [highlights] object that maintains highlights and can be manipulated from different sources"
      },
      {
        "type": "prop",
        "value": "{ui/TOC} [toc] object that maintains table of content entries"
      }
    ],
    "parent": "ui",
    "name": "ScrollPane",
    "members": [
      "ui/ScrollPane#getContentElement",
      "ui/ScrollPane#getContentHeight",
      "ui/ScrollPane#getHeight",
      "ui/ScrollPane#getPanelOffsetForElement",
      "ui/ScrollPane#getScrollPosition",
      "ui/ScrollPane#getScrollableElement",
      "ui/ScrollPane#scrollTo"
    ]
  },
  {
    "type": "method",
    "id": "ui/ScrollPane#getContentElement",
    "description": "<p>Get the <code>.se-content</code> element</p>\n",
    "sourceFile": "ui/ScrollPane.js",
    "sourceLine": 138,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ScrollPane",
    "name": "getContentElement",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ScrollPane#getContentHeight",
    "description": "<p>Returns the cumulated height of a panel's content</p>\n",
    "sourceFile": "ui/ScrollPane.js",
    "sourceLine": 126,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ScrollPane",
    "name": "getContentHeight",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ScrollPane#getHeight",
    "description": "<p>Returns the height of scrollPane (inner content overflows)</p>\n",
    "sourceFile": "ui/ScrollPane.js",
    "sourceLine": 118,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ScrollPane",
    "name": "getHeight",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ScrollPane#getPanelOffsetForElement",
    "description": "<p>Get offset relative to <code>.se-content</code>.</p>\n",
    "sourceFile": "ui/ScrollPane.js",
    "sourceLine": 162,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ScrollPane",
    "name": "getPanelOffsetForElement",
    "params": [
      {
        "type": "DOMNode",
        "shortType": "DOMNode",
        "name": "el",
        "description": "<p>DOM node that lives inside the</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "ui/ScrollPane#getScrollPosition",
    "description": "<p>Get current scroll position (scrollTop) of <code>.se-scrollable</code> element</p>\n",
    "sourceFile": "ui/ScrollPane.js",
    "sourceLine": 152,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ScrollPane",
    "name": "getScrollPosition",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ScrollPane#getScrollableElement",
    "description": "<p>Get the <code>.se-scrollable</code> element</p>\n",
    "sourceFile": "ui/ScrollPane.js",
    "sourceLine": 145,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ScrollPane",
    "name": "getScrollableElement",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/ScrollPane#scrollTo",
    "description": "<p>Scroll to a given sub component.</p>\n",
    "sourceFile": "ui/ScrollPane.js",
    "sourceLine": 189,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/ScrollPane",
    "name": "scrollTo",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "componentId",
        "description": "<p>component id, must be present in data-id attribute</p>\n"
      }
    ]
  },
  {
    "type": "class",
    "id": "ui/Scrollbar",
    "description": "<p>A rich scrollbar implementation that supports highlights.   Usually\ninstantiated by <a href=\"#nodeId=ScrollPane\" data-type=\"cross-link\" data-node-id=\"ScrollPane\">ScrollPane</a>, so you will likely not create it\nyourself.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">$$(Scrollbar, {\n  scrollPane: <span class=\"hljs-keyword\">this</span>,\n  highlights: {\n    <span class=\"hljs-string\">'bib-items'</span>: [<span class=\"hljs-string\">'bib-item-citation-1'</span>, <span class=\"hljs-string\">'bib-item-citation-2'</span>]\n  }\n}).ref(<span class=\"hljs-string\">'scrollbar'</span>)\n</code></pre>\n",
    "sourceFile": "ui/Scrollbar.js",
    "sourceLine": 8,
    "isPrivate": true,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": {
          "type": "ui/ScrollPane",
          "shortType": "ScrollPane",
          "name": "scrollPane",
          "description": "<p>scroll pane the scrollbar operates on</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "object",
          "shortType": "object",
          "name": "highlights",
          "description": "<p>hightlights grouped by scope</p>\n"
        }
      }
    ],
    "parent": "ui",
    "name": "Scrollbar",
    "members": []
  },
  {
    "type": "class",
    "id": "ui/SplitPane",
    "description": "<p>A split view layout component. Takes properties for configuration and 2 children via append.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">$$(SplitPane, {\n  sizeA: <span class=\"hljs-string\">'30%'</span>\n  splitType: <span class=\"hljs-string\">'horizontal'</span>\n}).append(\n  $$(<span class=\"hljs-string\">'div'</span>).append(<span class=\"hljs-string\">'Pane A'</span>)\n  $$(<span class=\"hljs-string\">'div'</span>).append(<span class=\"hljs-string\">'Pane B'</span>)\n)\n</code></pre>\n",
    "sourceFile": "ui/SplitPane.js",
    "sourceLine": 6,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "splitType",
          "description": "<p>either 'vertical' (default) or 'horizontal'.</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "sizeA",
          "description": "<p>size of the first pane (A). '40%' or '100px' or 'inherit' are valid values.</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "sizeB",
          "description": "<p>size of second pane. sizeA and sizeB can not be combined.</p>\n"
        }
      }
    ],
    "parent": "ui",
    "name": "SplitPane",
    "members": []
  },
  {
    "type": "class",
    "id": "ui/Surface",
    "description": "<p>Abstract interface for editing components.\nDances with contenteditable, so you don't have to.</p>\n",
    "sourceFile": "ui/Surface.js",
    "sourceLine": 28,
    "tags": [
      {
        "type": "component",
        "value": ""
      }
    ],
    "parent": "ui",
    "name": "Surface",
    "members": [
      "ui/Surface#copy",
      "ui/Surface#delete",
      "ui/Surface#insertText",
      "ui/Surface#paste",
      "ui/Surface#selectAll",
      "ui/Surface#setSelection",
      "ui/Surface#softBreak",
      "ui/Surface#transaction"
    ],
    "isAbstract": true
  },
  {
    "type": "method",
    "id": "ui/Surface#copy",
    "description": "<p>Copy the current selection. Performs a <a href=\"#nodeId=model/transform/copySelection\" data-type=\"cross-link\" data-node-id=\"model/transform/copySelection\">model/transform/copySelection</a>\ntransformation.</p>\n",
    "sourceFile": "ui/Surface.js",
    "sourceLine": 362,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Surface",
    "name": "copy",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Surface#delete",
    "description": "<p>Performs a <a href=\"#nodeId=model/transform/deleteSelection\" data-type=\"cross-link\" data-node-id=\"model/transform/deleteSelection\">model/transform/deleteSelection</a> transformation</p>\n",
    "sourceFile": "ui/Surface.js",
    "sourceLine": 341,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Surface",
    "name": "delete",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Surface#insertText",
    "description": "<p>Performs an <a href=\"#nodeId=model/transform/insertText\" data-type=\"cross-link\" data-node-id=\"model/transform/insertText\">model/transform/insertText</a> transformation</p>\n",
    "sourceFile": "ui/Surface.js",
    "sourceLine": 331,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Surface",
    "name": "insertText",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Surface#paste",
    "description": "<p>Performs a <a href=\"#nodeId=model/transform/paste\" data-type=\"cross-link\" data-node-id=\"model/transform/paste\">model/transform/paste</a> transformation</p>\n",
    "sourceFile": "ui/Surface.js",
    "sourceLine": 370,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Surface",
    "name": "paste",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Surface#selectAll",
    "description": "<p>Selects all text</p>\n",
    "sourceFile": "ui/Surface.js",
    "sourceLine": 312,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Surface",
    "name": "selectAll",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Surface#setSelection",
    "description": "<p>Set the model selection and update the DOM selection accordingly</p>\n",
    "sourceFile": "ui/Surface.js",
    "sourceLine": 272,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Surface",
    "name": "setSelection",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Surface#softBreak",
    "description": "<p>Inserts a soft break</p>\n",
    "sourceFile": "ui/Surface.js",
    "sourceLine": 353,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Surface",
    "name": "softBreak",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Surface#transaction",
    "description": "<p>Run a transformation as a transaction properly configured for this surface.</p>\n",
    "example": "<p>Returning a new selection:</p>\n<pre><code class=\"hljs lang-js\">surface.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tx, args</span>) </span>{\n  <span class=\"hljs-keyword\">var</span> selection = args.selection;\n  ...\n  selection = tx.createSelection(...);\n  <span class=\"hljs-keyword\">return</span> {\n    selection: selection\n  };\n});\n</code></pre>\n<p>Adding event information to the transaction:</p>\n<pre><code class=\"hljs lang-js\">surface.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tx, args</span>) </span>{\n  tx.info.foo = <span class=\"hljs-string\">'bar'</span>;\n  ...\n});\n</code></pre>\n",
    "sourceFile": "ui/Surface.js",
    "sourceLine": 248,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Surface",
    "name": "transaction",
    "params": [
      {
        "type": "",
        "shortType": "",
        "name": "transformation",
        "description": "<p>a transformation function(tx, args) which receives                       the selection the transaction was started with, and should return\noutput arguments containing a selection, as well.</p>\n"
      }
    ]
  },
  {
    "type": "class",
    "id": "ui/SurfaceCommand",
    "description": "<p>A class for commands intended to be executed on the <a href=\"#nodeId=ui/Surface\" data-type=\"cross-link\" data-node-id=\"ui/Surface\">ui/Surface</a>\nlevel. See the example below to learn how to define a custom <code>SurfaceCommand</code>.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> SurfaceCommand = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/ui/SurfaceCommand'</span>);\n<span class=\"hljs-keyword\">var</span> uuid = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/util/uuid'</span>);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">InsertImageCommand</span>(<span class=\"hljs-params\"></span>) </span>{\n  SurfaceCommand.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n}\nInsertImageCommand.Prototype = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.getCommandState = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> sel = <span class=\"hljs-keyword\">this</span>.getSelection();\n    <span class=\"hljs-keyword\">var</span> newState = { disabled: <span class=\"hljs-literal\">true</span>, active: <span class=\"hljs-literal\">false</span> };\n    <span class=\"hljs-keyword\">if</span> (sel &amp;&amp; !sel.isNull() &amp;&amp; sel.isPropertySelection()) {\n      newState.disabled = <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> newState;\n  };\n\n  <span class=\"hljs-keyword\">this</span>.execute = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">imageSrc</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> surface = <span class=\"hljs-keyword\">this</span>.getSurface();\n\n    surface.transaction(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tx, args</span>) </span>{\n      <span class=\"hljs-keyword\">var</span> newImage = {\n        id: uuid(<span class=\"hljs-string\">\"image\"</span>),\n        type: <span class=\"hljs-string\">\"image\"</span>,\n        src: imageSrc\n      };\n      <span class=\"hljs-comment\">// Note: returning the result which will contain an updated selection</span>\n      <span class=\"hljs-keyword\">return</span> surface.insertNode(tx, { selection: args.selection, node: newImage });\n    });\n  };\n\n};\nSurfaceCommand.extend(InsertImageCommand);\nInsertImageCommand.static.name = <span class=\"hljs-string\">'insertImage'</span>;\n</code></pre>\n",
    "sourceFile": "ui/SurfaceCommand.js",
    "sourceLine": 50,
    "tags": [],
    "parent": "ui",
    "name": "SurfaceCommand",
    "members": [
      "ui/SurfaceCommand#execute",
      "ui/SurfaceCommand#getContainerId",
      "ui/SurfaceCommand#getDocument",
      "ui/SurfaceCommand#getSelection",
      "ui/SurfaceCommand#getSurface"
    ],
    "isAbstract": true,
    "superClass": "ui/Command"
  },
  {
    "type": "method",
    "id": "ui/SurfaceCommand#execute",
    "description": "<p>Execute the command. Needs to be implemented by the custom command class.</p>\n",
    "sourceFile": "ui/SurfaceCommand.js",
    "sourceLine": 101,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/SurfaceCommand",
    "name": "execute",
    "params": [],
    "returns": {
      "type": "data/Document",
      "description": "<p>The document instance owned by the controller</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/SurfaceCommand#getContainerId",
    "description": "<p>Get containerId. Only available on container surfaces, e.g. <a href=\"#nodeId=module:ui.surface.ContainerEditor\" data-type=\"cross-link\" data-node-id=\"module:ui.surface.ContainerEditor\">module:ui.surface.ContainerEditor</a>.</p>\n",
    "sourceFile": "ui/SurfaceCommand.js",
    "sourceLine": 80,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/SurfaceCommand",
    "name": "getContainerId",
    "params": [],
    "returns": {
      "type": "String",
      "description": "<p>the container id</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/SurfaceCommand#getDocument",
    "description": "<p>Get the current document</p>\n",
    "sourceFile": "ui/SurfaceCommand.js",
    "sourceLine": 90,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/SurfaceCommand",
    "name": "getDocument",
    "params": [],
    "returns": {
      "type": "data/Document",
      "description": "<p>the container id</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/SurfaceCommand#getSelection",
    "description": "<p>Get current selection of surface bound to the command</p>\n",
    "sourceFile": "ui/SurfaceCommand.js",
    "sourceLine": 70,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/SurfaceCommand",
    "name": "getSelection",
    "params": [],
    "returns": {
      "type": "model/Selection",
      "description": "<p>the current document selection derived from the surface.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "ui/SurfaceCommand#getSurface",
    "description": "<p>Get Surface instance</p>\n",
    "sourceFile": "ui/SurfaceCommand.js",
    "sourceLine": 61,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/SurfaceCommand",
    "name": "getSurface",
    "params": [],
    "returns": {
      "type": "ui/Surface",
      "description": "<p>The surface instance</p>\n"
    }
  },
  {
    "type": "class",
    "id": "ui/SurfaceTool",
    "description": "<p>Abstract class for tools that interact with the selection of active surface.\nNeeds to be instantiated inside a <a href=\"#nodeId=ui/Controller\" data-type=\"cross-link\" data-node-id=\"ui/Controller\">ui/Controller</a> context.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> SurfaceTool = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/ui/SurfaceTool'</span>);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">InsertImageTool</span>(<span class=\"hljs-params\"></span>) </span>{\n  InsertImageTool.super.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n}\nSurfaceTool.extend(InsertImageTool);\nInsertImageTool.static.name = <span class=\"hljs-string\">'insertImage'</span>;\nInsertImageTool.static.command = <span class=\"hljs-string\">'insertImage'</span>;\n</code></pre>\n",
    "sourceFile": "ui/SurfaceTool.js",
    "sourceLine": 26,
    "tags": [
      {
        "type": "component",
        "value": ""
      }
    ],
    "parent": "ui",
    "name": "SurfaceTool",
    "members": [
      "ui/SurfaceTool#dispose",
      "ui/SurfaceTool#getCommand",
      "ui/SurfaceTool#getContainer",
      "ui/SurfaceTool#getDocument",
      "ui/SurfaceTool#getSurface",
      "ui/SurfaceTool#performAction"
    ],
    "isAbstract": true,
    "superClass": "ui/Tool"
  },
  {
    "type": "method",
    "id": "ui/SurfaceTool#dispose",
    "description": "<p>Unbinds event handler before getting unmounted.</p>\n<p>Custom tool implementation must do a super call.</p>\n",
    "sourceFile": "ui/SurfaceTool.js",
    "sourceLine": 55,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/SurfaceTool",
    "name": "dispose",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/SurfaceTool#getCommand",
    "description": "<p>Get command associated with the tool, based on the focused surface</p>\n",
    "sourceFile": "ui/SurfaceTool.js",
    "sourceLine": 37,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/SurfaceTool",
    "name": "getCommand",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/SurfaceTool#getContainer",
    "description": "<p>Return the currently active container</p>\n",
    "sourceFile": "ui/SurfaceTool.js",
    "sourceLine": 86,
    "isPrivate": false,
    "tags": [
      {
        "type": "public",
        "value": ""
      }
    ],
    "parent": "ui/SurfaceTool",
    "name": "getContainer",
    "params": [],
    "returns": {
      "type": "Document.Container",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/SurfaceTool#getDocument",
    "description": "<p>Return the document associated with the focused surface.</p>\n",
    "sourceFile": "ui/SurfaceTool.js",
    "sourceLine": 76,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/SurfaceTool",
    "name": "getDocument",
    "params": [],
    "returns": {
      "type": "model/Document",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/SurfaceTool#getSurface",
    "description": "<p>Return the currently focused surface</p>\n",
    "sourceFile": "ui/SurfaceTool.js",
    "sourceLine": 67,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/SurfaceTool",
    "name": "getSurface",
    "params": [],
    "returns": {
      "type": "ui/Surface",
      "description": ""
    }
  },
  {
    "type": "method",
    "id": "ui/SurfaceTool#performAction",
    "description": "<p>Executes the associated command</p>\n",
    "sourceFile": "ui/SurfaceTool.js",
    "sourceLine": 96,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/SurfaceTool",
    "name": "performAction",
    "params": []
  },
  {
    "type": "class",
    "id": "ui/TOC",
    "description": "<p>Manages a table of content for a container. Default implementation considers\nall headings as TOC entries. You can extend this implementation and override\n<code>computeEntries</code>. Instantiate this class on controller level and pass it to relevant components\n(such as <a href=\"#nodeId=ui/TOCPanel\" data-type=\"cross-link\" data-node-id=\"ui/TOCPanel\">ui/TOCPanel</a> and <a href=\"#nodeId=ui/ScrollPane\" data-type=\"cross-link\" data-node-id=\"ui/ScrollPane\">ui/ScrollPane</a>).</p>\n",
    "sourceFile": "ui/TOC.js",
    "sourceLine": 10,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": "{Controller}"
      }
    ],
    "parent": "ui",
    "name": "TOC",
    "members": []
  },
  {
    "type": "class",
    "id": "ui/TabbedPane",
    "description": "<p>A tabbed pane layout component. The actual content is specified via append.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">$$(TabbedPane, {\n  tabs: [\n    {id: <span class=\"hljs-string\">'tabA'</span>, <span class=\"hljs-string\">'A'</span>},\n    {id: <span class=\"hljs-string\">'tabB'</span>, <span class=\"hljs-string\">'B'</span>},\n  ],\n  activeTab: <span class=\"hljs-string\">'tabA'</span>\n}).ref(<span class=\"hljs-string\">'tabbedPane'</span>).append(\n  tabAContent\n)\n</code></pre>\n",
    "sourceFile": "ui/TabbedPane.js",
    "sourceLine": 7,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": {
          "type": "Object[]",
          "shortType": "Object[]",
          "name": "tabs",
          "description": "<p>an array of objects with id and name properties</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "activeTab",
          "description": "<p>id of currently active tab</p>\n"
        }
      }
    ],
    "parent": "ui",
    "name": "TabbedPane",
    "members": []
  },
  {
    "type": "class",
    "id": "ui/TextPropertyAnnotator",
    "description": "<p>Annotator for a text property. Needs to be instantiated inside a <a href=\"#nodeId=ui/Controller\" data-type=\"cross-link\" data-node-id=\"ui/Controller\">ui/Controller</a>\ncontext. Works like a TextPropertyEditor but you can only annotate, not edit.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">$$(TextPropertyAnnotator, {\n  name: <span class=\"hljs-string\">'abstract'</span>,\n  path: [<span class=\"hljs-string\">'metadata'</span>, <span class=\"hljs-string\">'abstract'</span>],\n  commands: [EmphasisCommand]\n})\n</code></pre>\n",
    "sourceFile": "ui/TextPropertyAnnotator.js",
    "sourceLine": 32,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "name",
          "description": "<p>unique surface name</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "String[]",
          "shortType": "String[]",
          "name": "path",
          "description": "<p>path to a text property</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "ui/SurfaceCommand[]",
          "shortType": "SurfaceCommand[]",
          "name": "commands",
          "description": "<p>array of command classes to be available</p>\n"
        }
      }
    ],
    "parent": "ui",
    "name": "TextPropertyAnnotator",
    "members": [],
    "superClass": "ui/Surface"
  },
  {
    "type": "class",
    "id": "ui/TextPropertyComponent",
    "description": "<p>Renders a text property. Used internally by different components to render editable text.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">$$(TextProperty, {\n  path: [ <span class=\"hljs-string\">'paragraph-1'</span>, <span class=\"hljs-string\">'content'</span>]\n})\n</code></pre>\n",
    "sourceFile": "ui/TextPropertyComponent.js",
    "sourceLine": 29,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": {
          "type": "String[]",
          "shortType": "String[]",
          "name": "path",
          "description": "<p>path to a text property</p>\n"
        }
      },
      {
        "type": "prop",
        "value": "{String} [tagName] specifies which tag should be used - defaults to `div`"
      }
    ],
    "parent": "ui",
    "name": "TextPropertyComponent",
    "members": [],
    "superClass": "ui/AnnotatedTextComponent"
  },
  {
    "type": "class",
    "id": "ui/TextPropertyEditor",
    "description": "<p>Editor for a text property (annotated string). Needs to be\ninstantiated inside a <a href=\"#nodeId=ui/Controller\" data-type=\"cross-link\" data-node-id=\"ui/Controller\">ui/Controller</a> context.</p>\n",
    "example": "<p>Create a <code>TextPropertyEditor</code> for the <code>name</code> property of an author object. Allow emphasis annotations.</p>\n<pre><code class=\"hljs lang-js\">$$(TextPropertyEditor, {\n  name: <span class=\"hljs-string\">'authorNameEditor'</span>,\n  path: [<span class=\"hljs-string\">'author_1'</span>, <span class=\"hljs-string\">'name'</span>],\n  commands: [EmphasisCommand]\n})\n</code></pre>\n",
    "sourceFile": "ui/TextPropertyEditor.js",
    "sourceLine": 33,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": {
          "type": "String",
          "shortType": "String",
          "name": "name",
          "description": "<p>unique editor name</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "String[]",
          "shortType": "String[]",
          "name": "path",
          "description": "<p>path to a text property</p>\n"
        }
      },
      {
        "type": "prop",
        "value": {
          "type": "ui/SurfaceCommand[]",
          "shortType": "SurfaceCommand[]",
          "name": "commands",
          "description": "<p>array of command classes to be available</p>\n"
        }
      }
    ],
    "parent": "ui",
    "name": "TextPropertyEditor",
    "members": [
      "ui/TextPropertyEditor#selectAll"
    ],
    "superClass": "ui/Surface"
  },
  {
    "type": "method",
    "id": "ui/TextPropertyEditor#selectAll",
    "description": "<p>Selects all text</p>\n",
    "sourceFile": "ui/TextPropertyEditor.js",
    "sourceLine": 54,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/TextPropertyEditor",
    "name": "selectAll",
    "params": []
  },
  {
    "type": "class",
    "id": "ui/Tool",
    "description": "<p>Abstract Tool interface for editing and annotation tools.</p>\n<p>A tool must be associated with a Command, which holds all the logic, while the tool\nis just the visual representation of the command state.</p>\n<p>Like with <a href=\"#nodeId=ui/Command\" data-type=\"cross-link\" data-node-id=\"ui/Command\">ui/Command</a> are two categories of tools, <a href=\"#nodeId=ui/SurfaceTool\" data-type=\"cross-link\" data-node-id=\"ui/SurfaceTool\">ui/SurfaceTool</a>\nand <a href=\"#nodeId=ui/ControllerTool\" data-type=\"cross-link\" data-node-id=\"ui/ControllerTool\">ui/ControllerTool</a>.</p>\n",
    "sourceFile": "ui/Tool.js",
    "sourceLine": 20,
    "tags": [
      {
        "type": "component",
        "value": ""
      }
    ],
    "parent": "ui",
    "name": "Tool",
    "members": [
      "ui/Tool#getController",
      "ui/Tool#getName",
      "ui/Tool#render"
    ]
  },
  {
    "type": "method",
    "id": "ui/Tool#getController",
    "description": "<p>Get controller context</p>\n",
    "sourceFile": "ui/Tool.js",
    "sourceLine": 94,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Tool",
    "name": "getController",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Tool#getName",
    "description": "<p>Get tool registration name</p>\n",
    "sourceFile": "ui/Tool.js",
    "sourceLine": 101,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Tool",
    "name": "getName",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/Tool#render",
    "description": "<p>Default tool rendering. You can override this method to provide your custom markup</p>\n",
    "sourceFile": "ui/Tool.js",
    "sourceLine": 45,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/Tool",
    "name": "render",
    "params": []
  },
  {
    "type": "class",
    "id": "ui/Toolbar",
    "description": "<p>A simple container holding editing tools.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">$$(Toolbar).append(\n  $$(Toolbar.Group).append(\n    $$(UndoTool).append($$(Icon, {icon: <span class=\"hljs-string\">'fa-undo'</span>}))\n  )\n)\n</code></pre>\n",
    "sourceFile": "ui/Toolbar.js",
    "sourceLine": 24,
    "tags": [
      {
        "type": "component",
        "value": ""
      }
    ],
    "parent": "ui",
    "name": "Toolbar",
    "members": [
      "ui/Toolbar.Dropdown",
      "ui/Toolbar.Group"
    ]
  },
  {
    "type": "class",
    "id": "ui/Toolbar.Dropdown",
    "example": "<pre><code class=\"hljs\">$$(Toolbar.Dropdown, {label: $$(Icon, {icon: <span class=\"hljs-string\">'fa-image'</span>}),}).append(\n  $$(InsertFigureTool).append(<span class=\"hljs-keyword\">this</span>.i18n.t(<span class=\"hljs-string\">'insert'</span>))\n)\n</code></pre>\n",
    "sourceFile": "ui/Toolbar.js",
    "sourceLine": 38,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": {
          "type": "ui/VirtualDOMElement",
          "shortType": "VirtualDOMElement",
          "name": "name",
          "description": "<p>unique editor name</p>\n"
        }
      }
    ],
    "parent": "ui/Toolbar",
    "name": "Dropdown",
    "members": [],
    "isStatic": true
  },
  {
    "type": "class",
    "id": "ui/Toolbar.Group",
    "example": "<pre><code class=\"hljs lang-js\">$$(Toolbar.Group).append(\n  $$(StrongTool).append($$(Icon, {icon: <span class=\"hljs-string\">'fa-bold'</span>}))\n)\n</code></pre>\n",
    "sourceFile": "ui/Toolbar.js",
    "sourceLine": 112,
    "tags": [
      {
        "type": "component",
        "value": ""
      },
      {
        "type": "prop",
        "value": {
          "type": "ui/VirtualDOMElement",
          "shortType": "VirtualDOMElement",
          "name": "name",
          "description": "<p>unique editor name</p>\n"
        }
      }
    ],
    "parent": "ui/Toolbar",
    "name": "Group",
    "members": [],
    "isStatic": true
  },
  {
    "type": "class",
    "id": "ui/VirtualDOMElement",
    "description": "<p>A virtual <a href=\"#nodeId=ui/DOMElement\" data-type=\"cross-link\" data-node-id=\"ui/DOMElement\">ui/DOMElement</a> which is used for the <a href=\"#nodeId=ui/Component\" data-type=\"cross-link\" data-node-id=\"ui/Component\">ui/Component</a> API.</p>\n<p>A VirtualDOMElement is just a description of a DOM structure. It represents a virtual\nDOM mixed with Components. This virtual structure needs to be compiled to a <a href=\"#nodeId=ui/Component\" data-type=\"cross-link\" data-node-id=\"ui/Component\">ui/Component</a>\nto actually create a real DOM element.</p>\n",
    "sourceFile": "ui/VirtualDOMElement.js",
    "sourceLine": 21,
    "tags": [],
    "parent": "ui",
    "name": "VirtualDOMElement",
    "members": [
      "ui/VirtualDOMElement#ref",
      "ui/VirtualDOMElement#route",
      "ui/VirtualDOMElement.createElement"
    ]
  },
  {
    "type": "method",
    "id": "ui/VirtualDOMElement#ref",
    "description": "<p>Associates a reference identifier with this element.</p>\n<p>When rendered the corresponding component is stored in the owner using the given key.\nIn addition to that, components with a reference are preserved when its parent is rerendered.</p>\n",
    "sourceFile": "ui/VirtualDOMElement.js",
    "sourceLine": 50,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/VirtualDOMElement",
    "name": "ref",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "ref",
        "description": "<p>id for the compiled Component</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "ui/VirtualDOMElement#route",
    "description": "<p>Enables routing.</p>\n",
    "sourceFile": "ui/VirtualDOMElement.js",
    "sourceLine": 90,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/VirtualDOMElement",
    "name": "route",
    "params": []
  },
  {
    "type": "method",
    "id": "ui/VirtualDOMElement.createElement",
    "description": "<p>Create a virtual DOM representation which is used by Component\nfor differential/reactive rendering.</p>\n",
    "example": "<p>Create a virtual DOM Element</p>\n<pre><code class=\"hljs\">$$(<span class=\"hljs-string\">'a'</span>).<span class=\"hljs-function\"><span class=\"hljs-title\">attr</span><span class=\"hljs-params\">({href: <span class=\"hljs-string\">'./foo'</span>})</span></span>.<span class=\"hljs-function\"><span class=\"hljs-title\">addClass</span><span class=\"hljs-params\">(<span class=\"hljs-string\">'se-nav-item'</span>)</span></span>\n</code></pre>\n<p>Create a virtual Component</p>\n<pre><code class=\"hljs\"><span class=\"hljs-variable\">$$</span>(<span class=\"hljs-constant\">HelloMessage,</span> {<span class=\"hljs-symbol\">name:</span> <span class=\"hljs-string\">'John'</span>})\n</code></pre>\n",
    "sourceFile": "ui/VirtualDOMElement.js",
    "sourceLine": 553,
    "isPrivate": false,
    "tags": [],
    "parent": "ui/VirtualDOMElement",
    "name": "createElement",
    "params": [
      {
        "type": "",
        "shortType": "",
        "name": "elementType",
        "description": "<p>HTML tag name or Component class</p>\n"
      },
      {
        "type": "",
        "shortType": "",
        "name": "[props]",
        "description": "<p>a properties object for Component classes</p>\n"
      }
    ],
    "returns": {
      "type": "VirtualNode",
      "description": "<p>a virtual DOM node</p>\n"
    },
    "isStatic": true
  },
  {
    "type": "namespace",
    "id": "util",
    "name": "util",
    "description": "<p><code>util</code> provides useful functions for inheritance, an EventEmitter implementation as well as Factory and Registry implementations.</p>\n",
    "members": [
      "util/EventEmitter",
      "util/oo",
      "util/platform",
      "util/server"
    ]
  },
  {
    "type": "class",
    "id": "util/EventEmitter",
    "description": "<p>Event support.</p>\n",
    "sourceFile": "util/EventEmitter.js",
    "sourceLine": 15,
    "isPrivate": true,
    "tags": [],
    "parent": "util",
    "name": "EventEmitter",
    "members": [
      "util/EventEmitter#connect",
      "util/EventEmitter#disconnect",
      "util/EventEmitter#emit",
      "util/EventEmitter#off",
      "util/EventEmitter#on"
    ]
  },
  {
    "type": "method",
    "id": "util/EventEmitter#connect",
    "description": "<p>Connect a listener to a set of events.</p>\n<p>Optionally, a <code>priority</code> can be provided to control the order\nof all bindings. The default priority is 0. All listeners with the\nsame priority remain in order of registration.\nA lower priority will make the listener be called later, a higher\npriority earlier.</p>\n",
    "sourceFile": "util/EventEmitter.js",
    "sourceLine": 68,
    "isPrivate": false,
    "tags": [
      {
        "type": "chainable",
        "value": ""
      }
    ],
    "parent": "util/EventEmitter",
    "name": "connect",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "listener",
        "description": ""
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "hash",
        "description": "<p>with event as keys, and handler functions as values.</p>\n"
      },
      {
        "type": "Number",
        "shortType": "Number",
        "name": "hash",
        "description": "<p>with <code>priority</code> as ordering hint (default is 0).</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "util/EventEmitter#disconnect",
    "description": "<p>Disconnect a listener (all bindings).</p>\n",
    "sourceFile": "util/EventEmitter.js",
    "sourceLine": 82,
    "isPrivate": false,
    "tags": [
      {
        "type": "method",
        "value": "disconnect"
      },
      {
        "type": "memberof",
        "value": "module:util.EventEmitter.prototype"
      },
      {
        "type": "chainable",
        "value": ""
      }
    ],
    "parent": "util/EventEmitter",
    "name": "disconnect",
    "params": [
      {
        "type": "Object",
        "shortType": "Object",
        "name": "listener",
        "description": ""
      }
    ]
  },
  {
    "type": "method",
    "id": "util/EventEmitter#emit",
    "description": "<p>Emit an event.</p>\n",
    "sourceFile": "util/EventEmitter.js",
    "sourceLine": 28,
    "isPrivate": false,
    "tags": [],
    "parent": "util/EventEmitter",
    "name": "emit",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "event",
        "description": ""
      },
      {
        "type": "",
        "shortType": "",
        "name": "...arguments",
        "description": ""
      }
    ],
    "returns": {
      "type": "",
      "description": "<p>true if a listener was notified, false otherwise.</p>\n"
    }
  },
  {
    "type": "method",
    "id": "util/EventEmitter#off",
    "description": "<p>Unsubscrive a listener from an event.</p>\n",
    "sourceFile": "util/EventEmitter.js",
    "sourceLine": 112,
    "isPrivate": false,
    "tags": [],
    "parent": "util/EventEmitter",
    "name": "off",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "event",
        "description": ""
      },
      {
        "type": "Function",
        "shortType": "Function",
        "name": "method",
        "description": ""
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "context",
        "description": ""
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "type": "method",
    "id": "util/EventEmitter#on",
    "description": "<p>Subscribe a listener to an event.</p>\n",
    "sourceFile": "util/EventEmitter.js",
    "sourceLine": 95,
    "isPrivate": false,
    "tags": [],
    "parent": "util/EventEmitter",
    "name": "on",
    "params": [
      {
        "type": "String",
        "shortType": "String",
        "name": "event",
        "description": ""
      },
      {
        "type": "Function",
        "shortType": "Function",
        "name": "method",
        "description": ""
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "context",
        "description": ""
      },
      {
        "type": "Object",
        "shortType": "Object",
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "type": "module",
    "id": "util/oo",
    "description": "<p>Helpers for oo programming.</p>\n",
    "sourceFile": "util/oo.js",
    "sourceLine": 18,
    "tags": [],
    "parent": "util",
    "name": "oo",
    "members": [
      "util/oo.inherit",
      "util/oo.initClass"
    ]
  },
  {
    "type": "method",
    "id": "util/oo.inherit",
    "description": "<p>Inherit from a parent class.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> oo = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/basics/oo'</span>);\n<span class=\"hljs-keyword\">var</span> Parent = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{};\nParent.Prototype = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-keyword\">this</span>.foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'foo'</span>; }\n}\n<span class=\"hljs-keyword\">var</span> Child = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  Parent.apply(<span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>);\n}\noo.inherit(Child, Parent);\n</code></pre>\n",
    "sourceFile": "util/oo.js",
    "sourceLine": 197,
    "isPrivate": false,
    "tags": [],
    "parent": "util/oo",
    "name": "inherit",
    "params": [
      {
        "type": "Constructor",
        "shortType": "Constructor",
        "name": "clazz",
        "description": "<p>class constructor</p>\n"
      },
      {
        "type": "Constructor",
        "shortType": "Constructor",
        "name": "parentClazz",
        "description": "<p>parent constructor</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "util/oo.initClass",
    "description": "<p>Initialize a class.</p>\n<p>After initializing a class has a <code>static</code> scope which can be used for static properties\nand functions. These static members get inherited by subclasses, which makes this approach\nas close as possible to ES6.</p>\n<p>An initialized class has an <code>extend</code> function which can be used to derive subclasses.</p>\n",
    "example": "<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyClass</span><span class=\"hljs-params\">()</span> <span class=\"hljs-comment\">{\n  ...\n}</span>\n<span class=\"hljs-title\">oo</span>.<span class=\"hljs-title\">initClass</span><span class=\"hljs-params\">(MyClass)</span>;</span>\n</code></pre>\n<h4>Extending a class</h4>\n<p>The simplest way to create a subclass is</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">var</span> Foo = MyClass.<span class=\"hljs-function\"><span class=\"hljs-title\">extend</span><span class=\"hljs-params\">()</span></span>\n</code></pre>\n<p>This is the disadvantage, that the created class is anonymous, i.e., in a debugger it\ndoes not have a senseful name.</p>\n<p>The preferred way is to extend a subclass this way:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span><span class=\"hljs-params\">()</span> </span>{\n  Foo.<span class=\"hljs-keyword\">super</span>.apply(<span class=\"hljs-keyword\">this</span>, arguments);\n}\nMyClass.extend(Foo);\n</code></pre>\n<p>This correnponds to what would do in ES6 with</p>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">extends</span></span> <span class=\"hljs-title\">MyClass</span> {</span>}\n</code></pre>\n<p>It is also possible to derive a class and provide a prototype as an object:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> Foo = MyClass.extend({\n  bla: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"bla\"</span>; }\n});\n</code></pre>\n<p>Again the result is an anonymous class, without the ability to show a meaningful name in a\ndebugger.</p>\n<p>If you want to define a prototype, the preferred way is extending an already defined class:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span><span class=\"hljs-params\">()</span> </span>{\n  Foo.<span class=\"hljs-keyword\">super</span>.apply(<span class=\"hljs-keyword\">this</span>, arguments);\n}\nMyClass.extend(Foo, {\n  bla: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"bla\"</span>; }\n});\n</code></pre>\n<p>If you prefer to write prototypes as functions you should do it this way:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span><span class=\"hljs-params\">()</span> </span>{\n  Foo.<span class=\"hljs-keyword\">super</span>.apply(<span class=\"hljs-keyword\">this</span>, arguments);\n}\nMyClass.extend(Foo, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.bla = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"bla\"</span>; };\n});\n</code></pre>\n<p>In that case the protoype is an anonymous class, i.e. it won't have a meaningful name in the debugger.</p>\n<p>To overcome this you can give the prototype function a name:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span><span class=\"hljs-params\">()</span> </span>{\n  Foo.<span class=\"hljs-keyword\">super</span>.apply(<span class=\"hljs-keyword\">this</span>, arguments);\n}\nMyClass.extend(Foo, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">FooPrototype</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.bla = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{ <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"bla\"</span>; };\n});\n</code></pre>\n<h4>Static variables</h4>\n<p>Static variables can either be set directly on the <code>static</code> scope:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> Foo = MyClass.extend();\nFoo.<span class=\"hljs-keyword\">static</span>.foo = <span class=\"hljs-string\">\"foo\"</span>\n</code></pre>\n<p>Or with a prototype you can provide them in a <code>static</code> object property of the prototype:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">MyClass</span><span class=\"hljs-class\">.extend</span>(<span class=\"hljs-rules\">{\n  <span class=\"hljs-rule\"><span class=\"hljs-attribute\">static</span>:<span class=\"hljs-value\"> {\n    foo: <span class=\"hljs-string\">\"foo\"</span>\n  </span></span></span>}\n});\n<span class=\"hljs-tag\">MyClass</span><span class=\"hljs-class\">.static</span><span class=\"hljs-class\">.foo</span> <span class=\"hljs-tag\">-</span>&gt; \"<span class=\"hljs-tag\">foo</span>\"\n</code></pre>\n<p>A static scope of a class comes with a reference to its owning class. I.e.,</p>\n<pre><code class=\"hljs\"><span class=\"hljs-tag\">MyClass</span><span class=\"hljs-class\">.static</span><span class=\"hljs-class\">.__class__</span>\n</code></pre>\n<p>Gives gives access to <code>MyClass</code>.</p>\n<h4>Mix-ins</h4>\n<p>Mixins must be plain objects. They get merged into the created prototype.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> MyMixin = {\n  foo: <span class=\"hljs-string\">\"foo\"</span>;\n};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span><span class=\"hljs-params\">()</span> </span>{\n  Foo.<span class=\"hljs-keyword\">super</span>.apply(<span class=\"hljs-keyword\">this</span>, arguments);\n}\nMyClass.extend(Foo, MyMixin);\n</code></pre>\n<p>This is also possible in combination with prototype functions.</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">var</span> MyMixin = {\n  foo: <span class=\"hljs-string\">\"foo\"</span>;\n  bar: <span class=\"hljs-string\">\"bar\"</span>;\n};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Foo</span><span class=\"hljs-params\">()</span> </span>{\n  Foo.<span class=\"hljs-keyword\">super</span>.apply(<span class=\"hljs-keyword\">this</span>, arguments);\n}\nMyClass.extend(Foo, MyMixin, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">this</span>.bar = <span class=\"hljs-string\">\"this wins\"</span>\n});\n</code></pre>\n<p>Mixins never override existing prototype functions, or already other mixed in members.</p>\n",
    "sourceFile": "util/oo.js",
    "sourceLine": 172,
    "isPrivate": false,
    "tags": [],
    "parent": "util/oo",
    "name": "initClass",
    "params": [
      {
        "type": "Constructor",
        "shortType": "Constructor",
        "name": "clazz",
        "description": ""
      }
    ]
  },
  {
    "type": "module",
    "id": "util/platform",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> platform = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/util/platform'</span>);\n</code></pre>\n",
    "sourceFile": "util/platform.js",
    "sourceLine": 13,
    "tags": [],
    "parent": "util",
    "name": "platform",
    "members": []
  },
  {
    "type": "module",
    "id": "util/server",
    "example": "<pre><code class=\"hljs lang-js\"><span class=\"hljs-keyword\">var</span> server = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'substance/util/server'</span>);\n</code></pre>\n",
    "sourceFile": "util/server.js",
    "sourceLine": 14,
    "tags": [],
    "parent": "util",
    "name": "server",
    "members": [
      "util/server.serveJS",
      "util/server.serveStyles"
    ]
  },
  {
    "type": "method",
    "id": "util/server.serveJS",
    "description": "<p>Serves a bundled JS file. Browserify is used as a module bundler.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">server.serveJS(app, <span class=\"hljs-string\">'app.js'</span>, path.join(__dirname, <span class=\"hljs-string\">'src'</span>, <span class=\"hljs-string\">'app.js'</span>));\n</code></pre>\n",
    "sourceFile": "util/server.js",
    "sourceLine": 30,
    "isPrivate": false,
    "tags": [],
    "parent": "util/server",
    "name": "serveJS",
    "params": [
      {
        "type": "ExpressApplication",
        "shortType": "ExpressApplication",
        "name": "expressApp",
        "description": "<p>Express.js application instance</p>\n"
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "route",
        "description": "<p>Express route under which the bundled javascript should be served</p>\n"
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "sourcePath",
        "description": "<p>entry point for js bundling</p>\n"
      }
    ]
  },
  {
    "type": "method",
    "id": "util/server.serveStyles",
    "description": "<p>Serves a bundled CSS file. For compilation Sass is used.</p>\n",
    "example": "<pre><code class=\"hljs lang-js\">server.serveStyles(app, <span class=\"hljs-string\">'/app.css'</span>, path.join(__dirname, <span class=\"hljs-string\">'src'</span>, <span class=\"hljs-string\">'app.scss'</span>));\n</code></pre>\n",
    "sourceFile": "util/server.js",
    "sourceLine": 55,
    "isPrivate": false,
    "tags": [],
    "parent": "util/server",
    "name": "serveStyles",
    "params": [
      {
        "type": "ExpressApplication",
        "shortType": "ExpressApplication",
        "name": "expressApp",
        "description": "<p>Express.js application instance</p>\n"
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "route",
        "description": "<p>Express route under which the styles should be served</p>\n"
      },
      {
        "type": "String",
        "shortType": "String",
        "name": "sourcePath",
        "description": "<p>entry point for sass compilation</p>\n"
      }
    ]
  }
]